.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.4.
.TH LTLSYNT "1" "August 2023" "ltlsynt (spot) 2.11.6" "User Commands"
.SH NAME
ltlsynt \- reactive synthesis from LTL specifications
.SH SYNOPSIS
.B ltlsynt
[\fI\,OPTION\/\fR...]
.SH DESCRIPTION
Synthesize a controller from its LTL specification.
.SS "Input options:"
.TP
\fB\-\-from\-pgame\fR=\fI\,FILENAME\/\fR
Read a parity game in Extended HOA format instead
of building it.
.TP
\fB\-f\fR, \fB\-\-formula\fR=\fI\,STRING\/\fR
process the formula STRING
.TP
\fB\-F\fR, \fB\-\-file\fR=\fI\,FILENAME\/\fR[\fI\,/COL\/\fR]\fI\,\/\fR
process each line of FILENAME as a formula; if COL
is a positive integer, assume a CSV file and read
column COL; use a negative COL to drop the first
line of the CSV file
.TP
\fB\-\-ins\fR=\fI\,PROPS\/\fR
comma\-separated list of uncontrollable (a.k.a.
input) atomic propositions
.TP
\fB\-\-lbt\-input\fR
read all formulas using LBT's prefix syntax
.TP
\fB\-\-lenient\fR
parenthesized blocks that cannot be parsed as
subformulas are considered as atomic properties
.TP
\fB\-\-outs\fR=\fI\,PROPS\/\fR
comma\-separated list of controllable (a.k.a.
output) atomic propositions
.TP
\fB\-\-tlsf\fR=\fI\,FILENAME\/\fR
Read a TLSF specification from FILENAME, and call
syfco to convert it into LTL
.SS "Output format:"
.TP
\fB\-8\fR, \fB\-\-utf8\fR
enable UTF\-8 characters in output (ignored with
\fB\-\-lbtt\fR or \fB\-\-spin\fR)
.TP
\fB\-\-check\fR[=\fI\,PROP\/\fR]
test for the additional property PROP and output
the result in the HOA format (implies \fB\-H\fR).  PROP
may be some prefix of 'all' (default),
\&'unambiguous', 'stutter\-invariant',
\&'stutter\-sensitive\-example', 'semi\-determinism',
or 'strength'.
.TP
\fB\-d\fR, \fB\-\-dot\fR[=\fI\,1\/\fR|\:\fI\,a\/\fR|\:\fI\,A\/\fR|\:\fI\,b\/\fR|\:\fI\,B\/\fR|\:\fI\,c\/\fR|\:\fI\,C(COLOR)\/\fR|\:\fI\,e\/\fR|\:\fI\,E\/\fR|\:\fI\,f(FONT)\/\fR|\:\fI\,h\/\fR|\:\fI\,i(ID)\/\fR|\:\fI\,k\/\fR|\:\fI\,K\/\fR|\:\fI\,n\/\fR|\:\fI\,N\/\fR|\:\fI\,o\/\fR|\:\fI\,r\/\fR|\:\fI\,R\/\fR|\:\fI\,s\/\fR|\:\fI\,t\/\fR|\:\fI\,u\/\fR|\:\fI\,v\/\fR|\:\fI\,y\/\fR|\:\fI\,+INT\/\fR|\:\fI\,<INT\/\fR|\:\fI\,#\/\fR]
GraphViz's format.  Add letters for (1) force
numbered states, (a) show acceptance condition
(default), (A) hide acceptance condition, (b)
acceptance sets as bullets, (B) bullets except for
Büchi/co\-Büchi automata, (c) force circular
nodes, (C) color nodes with COLOR, (d) show
origins when known, (e) force elliptic nodes, (E)
force rEctangular nodes, (f(FONT)) use FONT, (g)
hide edge labels, (h) horizontal layout, (i) or
(i(GRAPHID)) add IDs, (k) use state labels when
possible, (K) use transition labels (default), (n)
show name, (N) hide name, (o) ordered transitions,
(r) rainbow colors for acceptance sets, (R) color
acceptance sets by Inf/Fin, (s) with SCCs, (t)
force transition\-based acceptance, (u) hide true
states, (v) vertical layout, (y) split universal
edges by color, (+INT) add INT to all set numbers,
(<INT) display at most INT states, (#) show
internal edge numbers
.TP
\fB\-H\fR, \fB\-\-hoaf\fR[=\fI\,1.1\/\fR|\:\fI\,i\/\fR|\:\fI\,k\/\fR|\:\fI\,l\/\fR|\:\fI\,m\/\fR|\:\fI\,s\/\fR|\:\fI\,t\/\fR|\:\fI\,v\/\fR]
Output the automaton in HOA format
(default).  Add letters to select (1.1) version
1.1 of the format, (i) use implicit labels for
complete deterministic automata, (s) prefer
state\-based acceptance when possible [default],
(t) force transition\-based acceptance, (m) mix
state and transition\-based acceptance, (k) use
state labels when possible, (l) single\-line
output, (v) verbose properties
.TP
\fB\-\-lbtt\fR[=\fI\,t\/\fR]
LBTT's format (add =t to force transition\-based
acceptance even on Büchi automata)
.TP
\fB\-\-name\fR=\fI\,FORMAT\/\fR
set the name of the output automaton
.TP
\fB\-o\fR, \fB\-\-output\fR=\fI\,FORMAT\/\fR
send output to a file named FORMAT instead of
standard output.  The first automaton sent to a
file truncates it unless FORMAT starts with '>>'.
.TP
\fB\-q\fR, \fB\-\-quiet\fR
suppress all normal output
.TP
\fB\-s\fR, \fB\-\-spin\fR[=\fI\,6\/\fR|\:\fI\,c\/\fR]
Spin neverclaim (implies \fB\-\-ba\fR).  Add letters to
select (6) Spin's 6.2.4 style, (c) comments on
states
.TP
\fB\-\-stats\fR=\fI\,FORMAT\/\fR, \fB\-\-format\fR=\fI\,FORMAT\/\fR
output statistics about the automaton
.SS "Fine tuning:"
.TP
\fB\-\-algo\fR=\fI\,sd\/\fR|\fI\,ds\/\fR|\fI\,ps\/\fR|\fI\,lar\/\fR|\fI\,lar.old\/\fR|\fI\,acd\/\fR
choose the algorithm for synthesis: "sd":
translate to tgba, split, then determinize; "ds":
translate to tgba, determinize, then split; "ps":
translate to dpa, then split; "lar": translate to
a deterministic automaton with arbitrary
acceptance condition, then use LAR to turn to
parity, then split (default); "lar.old": old
version of LAR, for benchmarking; "acd": translate
to a deterministic automaton with arbitrary
acceptance condition, then use ACD to turn to
parity, then split.
.TP
\fB\-\-bypass\fR=\fI\,yes\/\fR|\fI\,no\/\fR
whether to try to avoid to construct a parity game
(enabled by default)
.TP
\fB\-\-decompose\fR=\fI\,yes\/\fR|\fI\,no\/\fR
whether to decompose the specification as multiple
output\-disjoint problems to solve independently
(enabled by default)
.TP
\fB\-\-simplify\fR=\fI\,no\/\fR|\fI\,bisim\/\fR|\fI\,bwoa\/\fR|\fI\,sat\/\fR|\fI\,bisim\-sat\/\fR|\fI\,bwoa\-sat\/\fR
simplification to apply to the controller (no)
nothing, (bisim) bisimulation\-based reduction,
(bwoa) bisimulation\-based reduction with output
assignment, (sat) SAT\-based minimization,
(bisim\-sat) SAT after bisim, (bwoa\-sat) SAT after
bwoa.  Defaults to 'bwoa'.
.SS "Output options:"
.TP
\fB\-\-aiger\fR[=\fI\,ite\/\fR|\:\fI\,isop\/\fR|\:\fI\,both[+ud][+dc][+sub0\/\fR|\:\fI\,sub1\/\fR|\:\fI\,sub2]\/\fR]
encode the winning strategy as an AIG circuit and
print it in AIGER format. The first word indicates
the encoding to used: "ite" for If\-Then\-Else
normal form; "isop" for irreducible sum of
products; "both" tries both and keeps the smaller
one. Other options further refine the encoding,
see aiger::encode_bdd. Defaults to "ite".
.TP
\fB\-\-csv\fR[\fI\,\/\fR=\fI\,\/\fR[\fI\,\/\fR>>]FILENAME]
output statistics as CSV in FILENAME or on
standard output (if '>>' is used to request append
mode, the header line is not output)
.TP
\fB\-\-dot\fR[=\fI\,options\/\fR]
Use dot format when printing the result (game,
strategy, or AIG circuit, depending on other
options).  The options that may be passed to \fB\-\-dot\fR
depend on the nature of what is printed. For games
and strategies, standard automata rendering
options are supported (e.g., see ltl2tgba \fB\-\-dot\fR).
For AIG circuit, use (h) for horizontal and (v)
for vertical layouts.
.TP
\fB\-\-hide\-status\fR
Hide the REALIZABLE or UNREALIZABLE line.  (Hint:
exit status is enough of an indication.)
.TP
\fB\-\-print\-game\-hoa\fR[=\fI\,options\/\fR]
print the parity game in the HOA format, do
not solve it
.TP
\fB\-\-print\-pg\fR
print the parity game in the pgsolver format, do
not solve it
.TP
\fB\-\-realizability\fR
realizability only, do not compute a winning
strategy
.SS "Miscellaneous options:"
.TP
\fB\-\-help\fR
print this help
.TP
\fB\-\-verbose\fR
verbose mode
.TP
\fB\-\-verify\fR
verify the strategy or (if demanded) AIG against
the formula
.TP
\fB\-\-version\fR
print program version
.TP
\fB\-x\fR, \fB\-\-extra\-options\fR=\fI\,OPTS\/\fR
fine\-tuning options (see spot\-x (7))
.PP
Mandatory or optional arguments to long options are also mandatory or optional
for any corresponding short options.
.SS "Exit status:"
.TP
0
if all input problems were realizable
.TP
1
if at least one input problem was not realizable
.TP
2
if any error has been reported
.SH BIBLIOGRAPHY
If you would like to give a reference to this tool in an article,
we suggest you cite the following paper:
.TP
\(bu
Thibaud Michaud, Maximilien Colange: Reactive Synthesis from LTL
Specification with Spot. Proceedings of SYNT@CAV'18.
.SH "REPORTING BUGS"
Report bugs to <spot@lrde.epita.fr>.
.SH COPYRIGHT
Copyright \(co 2023 Laboratoire de Recherche de l'Epita (LRE)
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

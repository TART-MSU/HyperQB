#line 2 "scanaut.cc"
#include "libc-config.h"
/* Flex 2.6.4's test for <inttypes.h> relies on __STDC_VERSION__
   which is undefined in C++.   So without that, it will define
   its own integer types, including a broken SIZE_MAX definition that
   breaks compilation on OpenBSD. So let's define __STDC_VERSION__ to
   make sure <inttypes.h> gets included.  Redefining __STDC_VERSION__
   this way can break all sort of macros defined in <cdefs.h>, so
   we include "libc-config.h" instead of "config.h" above to define
   those macros first. */
#if HAVE_INTTYPES_H && !(defined __STDC_VERSION__)
#  define __STDC_VERSION__ 199901L
#endif

#line 16 "scanaut.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define hoayy_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer hoayy_create_buffer
#endif

#ifdef yy_delete_buffer
#define hoayy_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer hoayy_delete_buffer
#endif

#ifdef yy_scan_buffer
#define hoayy_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer hoayy_scan_buffer
#endif

#ifdef yy_scan_string
#define hoayy_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string hoayy_scan_string
#endif

#ifdef yy_scan_bytes
#define hoayy_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes hoayy_scan_bytes
#endif

#ifdef yy_init_buffer
#define hoayy_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer hoayy_init_buffer
#endif

#ifdef yy_flush_buffer
#define hoayy_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer hoayy_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define hoayy_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state hoayy_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define hoayy_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer hoayy_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define hoayypush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state hoayypush_buffer_state
#endif

#ifdef yypop_buffer_state
#define hoayypop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state hoayypop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define hoayyensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack hoayyensure_buffer_stack
#endif

#ifdef yylex
#define hoayylex_ALREADY_DEFINED
#else
#define yylex hoayylex
#endif

#ifdef yyrestart
#define hoayyrestart_ALREADY_DEFINED
#else
#define yyrestart hoayyrestart
#endif

#ifdef yylex_init
#define hoayylex_init_ALREADY_DEFINED
#else
#define yylex_init hoayylex_init
#endif

#ifdef yylex_init_extra
#define hoayylex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra hoayylex_init_extra
#endif

#ifdef yylex_destroy
#define hoayylex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy hoayylex_destroy
#endif

#ifdef yyget_debug
#define hoayyget_debug_ALREADY_DEFINED
#else
#define yyget_debug hoayyget_debug
#endif

#ifdef yyset_debug
#define hoayyset_debug_ALREADY_DEFINED
#else
#define yyset_debug hoayyset_debug
#endif

#ifdef yyget_extra
#define hoayyget_extra_ALREADY_DEFINED
#else
#define yyget_extra hoayyget_extra
#endif

#ifdef yyset_extra
#define hoayyset_extra_ALREADY_DEFINED
#else
#define yyset_extra hoayyset_extra
#endif

#ifdef yyget_in
#define hoayyget_in_ALREADY_DEFINED
#else
#define yyget_in hoayyget_in
#endif

#ifdef yyset_in
#define hoayyset_in_ALREADY_DEFINED
#else
#define yyset_in hoayyset_in
#endif

#ifdef yyget_out
#define hoayyget_out_ALREADY_DEFINED
#else
#define yyget_out hoayyget_out
#endif

#ifdef yyset_out
#define hoayyset_out_ALREADY_DEFINED
#else
#define yyset_out hoayyset_out
#endif

#ifdef yyget_leng
#define hoayyget_leng_ALREADY_DEFINED
#else
#define yyget_leng hoayyget_leng
#endif

#ifdef yyget_text
#define hoayyget_text_ALREADY_DEFINED
#else
#define yyget_text hoayyget_text
#endif

#ifdef yyget_lineno
#define hoayyget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno hoayyget_lineno
#endif

#ifdef yyset_lineno
#define hoayyset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno hoayyset_lineno
#endif

#ifdef yyget_column
#define hoayyget_column_ALREADY_DEFINED
#else
#define yyget_column hoayyget_column
#endif

#ifdef yyset_column
#define hoayyset_column_ALREADY_DEFINED
#else
#define yyset_column hoayyset_column
#endif

#ifdef yywrap
#define hoayywrap_ALREADY_DEFINED
#else
#define yywrap hoayywrap
#endif

#ifdef yyalloc
#define hoayyalloc_ALREADY_DEFINED
#else
#define yyalloc hoayyalloc
#endif

#ifdef yyrealloc
#define hoayyrealloc_ALREADY_DEFINED
#else
#define yyrealloc hoayyrealloc
#endif

#ifdef yyfree
#define hoayyfree_ALREADY_DEFINED
#else
#define yyfree hoayyfree
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hoayywrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 102
#define YY_END_OF_BUFFER 103
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[506] =
    {   0,
        0,    0,   82,   82,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   80,   80,    0,    0,    0,    0,
      103,  101,    3,    1,    1,   88,  101,  101,  101,  101,
      101,  101,  100,  101,  101,   82,   85,   85,   84,   83,
       93,   90,   90,   89,  102,   99,   97,   97,   94,   96,
       32,  101,   36,  101,   33,   33,   33,   31,   33,   33,
       32,   33,   33,   33,   32,  101,   64,  101,   61,   65,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   71,
       72,   73,  101,   76,  101,   78,  101,   74,   80,    3,

       80,   80,   80,    1,    1,  101,  101,   50,  101,  101,
      101,  101,  101,  101,  101,  101,  101,    1,    1,   67,
      101,  101,  101,  101,    3,    1,    2,    2,    1,    0,
        0,    4,    0,    0,    0,    0,    0,    0,    0,   82,
       85,   86,   86,   85,   87,   83,   81,   93,   90,   91,
       91,   90,   92,   99,   97,   98,   98,   97,    0,    0,
        0,    0,   37,   35,   33,   34,   33,   33,   33,   33,
        0,   33,   33,   33,   33,   33,   33,    0,   64,   59,
       66,   66,   66,   57,   66,   56,   66,   55,   58,   66,
       66,   71,   71,   72,   77,   76,   79,   78,   75,   74,

       80,    3,    4,    1,    2,    0,    0,    0,    0,    2,
        1,    0,   46,   51,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   43,    1,    2,    0,    0,    0,
        0,    2,    1,   68,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   13,   10,    9,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   38,
       16,   33,   33,   33,   30,   33,   33,   33,   33,   33,
       33,   66,   66,   66,   66,   66,   66,    0,    0,    0,
        0,    0,    0,   49,   46,   52,   42,    0,    0,   53,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,   69,   70,    0,    0,    0,    0,    0,    0,    0,
       13,    6,    0,    0,    0,   95,    0,    0,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   66,   66,
       66,   60,   54,   65,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    8,    0,    0,
        0,   33,   33,   33,   33,   33,   33,   22,   33,   33,
       33,   21,   66,   66,   61,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   33,
       17,   15,   29,   33,   33,   33,   33,   33,   33,   63,
       62,    0,    0,    0,   41,   40,    0,    0,    0,    0,

        0,    0,    0,    0,    0,   28,   33,   14,   33,   33,
       33,   33,   33,    0,    0,    0,   39,    0,    0,    0,
        0,    0,    0,   12,    0,   27,   33,   33,   33,   33,
       33,   33,   48,    0,   45,   44,    0,    0,    0,    7,
        0,    0,   11,   33,   19,   33,   33,   33,   33,    0,
       45,    0,    0,    0,    5,    0,   33,   33,   33,   33,
       33,    0,    0,   18,   33,   23,   33,   33,    0,   33,
       33,   33,    0,   33,   33,   33,    0,   33,   33,   33,
        0,   33,   33,   33,    0,   20,   33,   33,   33,    0,
       33,   33,   33,   47,   26,   33,   33,   33,   33,   33,

       33,   25,   33,   24,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    6,    7,    8,    1,    1,    9,    1,   10,
       11,   12,    1,   13,   14,   15,   16,   17,   18,   19,
       20,   20,   20,   20,   20,   20,   20,   21,   22,    1,
        1,   23,    1,   24,   25,   26,   27,   28,   29,   30,
       30,   31,   30,   30,   30,   30,   30,   32,   33,   34,
       30,   35,   36,   37,   30,   30,   30,   30,   38,   30,
       39,   40,   41,    1,   42,    1,   43,   44,   45,   46,

       47,   48,   49,   50,   51,   30,   52,   53,   54,   55,
       56,   57,   30,   58,   59,   60,   61,   62,   30,   63,
       64,   30,   65,   66,   65,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[67] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    5,
        5,    6,    1,    7,    7,    6,    8,    8,    8,    8,
        9,    1,    1,    1,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,   10,    4,
       10,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    1,    1
    } ;

static const flex_int16_t yy_base[524] =
    {   0,
        0,   56,   10,   18,   22,   37,   38,   42,  113,    0,
      179,    0,  238,  288,  338,  388,   64,  246,  438,  488,
      538,  588,  638,  688,  270,  276,  743,    0,  803,  858,
     1285, 1286,    7,    7,   30, 1286, 1231, 1269, 1270,   81,
        1, 1248, 1286, 1233, 1236,    0,   51,   83, 1262, 1265,
        0,   86,   87, 1286,    0,    0,   91,   99, 1286,  245,
     1286, 1262,   88,    0,  267, 1254,   25,    0,  239,  238,
     1253,  244,  240,  246,  261,   22, 1286, 1250, 1286, 1286,
        0,   19, 1216,  225, 1215, 1222, 1223, 1216, 1209,  304,
      308, 1286, 1248,  312, 1247,  316, 1246,  320,    0,  108,

        0, 1251,    0,  344,  356, 1248,   81,  359,  255, 1205,
       15, 1227, 1199, 1195, 1210, 1213, 1236,  357,  387,  363,
      235, 1221, 1206, 1209,  295, 1248, 1247, 1244, 1243, 1196,
     1221, 1286,  407,  415, 1220, 1219, 1218, 1180, 1183,    0,
     1237, 1236, 1233, 1232, 1286, 1224, 1286,    0, 1232, 1231,
     1228, 1227, 1286,    0, 1228, 1227, 1224, 1223,  365, 1218,
     1160,  325,  403,    0, 1204, 1286, 1203,  269,  297,  270,
     1182,  320,  289,  332,  347,  373,  383,  387, 1286, 1286,
        0, 1163, 1165,    0, 1167,    0, 1159,    0,    0, 1167,
     1156,  430,  311,  442, 1286,  453, 1286,  457, 1286,  461,

        0,  396,    0,  460,  481,  401, 1183, 1168, 1171,  482,
      494, 1199,    0,  509, 1191, 1166, 1156, 1184, 1183, 1182,
     1163, 1148, 1142, 1145, 1286,  537,  556,  405, 1169, 1154,
     1157,  557,  569,  513, 1174, 1173, 1172, 1134, 1137, 1189,
     1190, 1137, 1165,  561,  613, 1286, 1286, 1169, 1142, 1137,
     1182, 1183, 1180, 1181, 1178, 1179,  565, 1148, 1148,  603,
     1286,  407,  461,  443, 1286,  497,  370,  447,  477,  432,
      430, 1132, 1124, 1118, 1120, 1118, 1127,  622,  631,  632,
      637,  673,  695, 1286,    0,  663, 1286,  453, 1119, 1286,
     1151,  463, 1118, 1123, 1118,  709,  710,  744,  781,  782,

      788,  714, 1286, 1147, 1120, 1115, 1118, 1131,  830,  581,
     1286, 1286, 1105, 1102,  580, 1286, 1133, 1132,  493,  283,
      543,  523,  499,  352, 1138,  526,  633, 1137, 1099, 1105,
     1108,    0,    0,    0, 1118, 1088, 1088, 1065, 1069, 1064,
     1049, 1046, 1036, 1032, 1089, 1046,  673, 1286, 1009, 1034,
     1057,  568, 1041, 1040,  532,  596,  520, 1286,  580,  608,
      723, 1286,  995, 1007,    0, 1000,  938,  942,  975,  640,
      948,  928,  927,  850,  953,  877,  987,  973,  972,  628,
     1286, 1286, 1286,  964,  556,  588,  643,  649,  623,    0,
        0,  934,  938,  920, 1286, 1286,  958,  924,  972,  969,

      863,  956,  885,  891,  955, 1286,  630, 1286,  663,  676,
      703,  696,  704,  947,  912,  945, 1286,  905,  899,  904,
      720,  950,  754, 1286,  910, 1286,  503,  942,  699,  734,
      737,  757, 1286,  917,    0, 1286,  918,  924,  949, 1286,
      887,  781, 1286,  767, 1286,  771,  759,  781,  773,  837,
        0,  802,  831,  857, 1286,  833,  836,  774,  833,  697,
      808,  816,  840, 1286,  804, 1286,  835,  825,  743,  775,
      820,  850,  693,  819,  904,  893,  684,  918,  867,  870,
      663,  597,  912,  913,  545, 1286,  924,  927,  928,  514,
      417,  929,  933, 1286, 1286,  930,  934,  936,  937,   88,

      940, 1286,   44, 1286, 1286,  999, 1009, 1019, 1029, 1039,
     1049, 1059, 1069, 1079, 1089, 1093, 1095, 1104,   30, 1113,
     1123, 1133, 1143
    } ;

static const flex_int16_t yy_def[524] =
    {   0,
      506,  506,  507,  507,  508,  508,  509,  509,  505,    9,
      505,   11,    2,    2,    2,    2,  506,  506,    2,    2,
        2,    2,    2,    2,  510,  510,    2,   27,    2,    2,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  511,  505,  505,  505,  512,
      513,  505,  505,  505,  514,  515,  505,  505,  505,  505,
      505,  505,  505,  516,  517,  517,  517,  518,  517,  517,
      517,  517,  517,  517,  517,  505,  505,  505,  505,  505,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  520,  520,

      520,  520,  520,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  511,
      505,  505,  505,  505,  505,  512,  505,  513,  505,  505,
      505,  505,  505,  515,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  516,  517,  505,  517,  517,  517,  517,
      518,  517,  517,  517,  517,  517,  517,  505,  505,  505,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  519,
      519,  505,  505,  505,  505,  505,  505,  505,  505,  505,

      520,  520,  520,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  521,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  517,  517,  517,  505,  517,  517,  517,  517,  517,
      517,  519,  519,  519,  519,  519,  519,  505,  505,  505,
      505,  505,  505,  505,  521,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,

      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  519,  519,
      519,  519,  519,  519,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  517,  517,  517,  517,  517,  517,  505,  517,  517,
      517,  505,  519,  519,  519,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  517,
      505,  505,  505,  517,  517,  517,  517,  517,  517,  519,
      519,  505,  505,  505,  505,  505,  505,  505,  505,  505,

      505,  505,  505,  505,  505,  505,  517,  505,  517,  517,
      517,  517,  517,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  517,  517,  517,  517,
      517,  517,  505,  505,  522,  505,  505,  505,  523,  505,
      505,  505,  505,  517,  505,  517,  517,  517,  517,  505,
      522,  505,  505,  523,  505,  505,  517,  517,  517,  517,
      517,  505,  505,  505,  517,  505,  517,  517,  505,  517,
      517,  517,  505,  517,  517,  517,  505,  517,  517,  517,
      505,  517,  517,  517,  505,  505,  517,  517,  517,  505,
      517,  517,  517,  505,  505,  517,  517,  517,  517,  517,

      517,  505,  517,  505,    0,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505
    } ;

static const flex_int16_t yy_nxt[1353] =
    {   0,
      505,   33,   34,   33,   35,  505,   36,   37,  125,  126,
      125,  127,   47,   38,   48,   39,   40,   40,   40,   40,
       47,   49,   48,  178,   52,   50,   53,   41,   54,   49,
       42,  179,  128,   50,  129,  135,  136,  181,   43,   52,
       57,   53,   58,   54,   57,  166,   58,   59,   60,  218,
      219,   59,   60,  141,   44,  142,   45,   33,   34,   33,
       35,   55,   36,   37,  504,   33,   34,   33,   35,   38,
       36,   39,   40,   40,   40,   40,   55,  182,  183,   39,
       92,   92,  133,   41,  170,  143,   42,  144,  149,  151,
      150,  152,  132,  155,   43,  156,  213,  134,  134,  134,

      134,  157,   43,  158,  163,  163,  163,  163,  502,  202,
       44,  202,   45,   32,   33,   34,   33,   35,   61,   36,
       32,   61,   61,   61,   32,   32,   62,   32,   39,   63,
       63,   63,   63,   32,   32,   32,   64,   65,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   67,   66,
       66,   68,   32,   61,   66,   69,   66,   70,   66,   66,
       71,   66,   66,   66,   66,   66,   66,   72,   66,   73,
       66,   74,   75,   66,   66,   66,   66,   61,   61,   32,
       33,   34,   33,   35,   76,   36,   32,   32,   77,   32,
       32,   32,   78,   32,   39,   79,   80,   32,   32,   32,

       32,   32,   32,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   43,   32,   32,
       32,   82,   81,   81,   83,   81,   84,   85,   81,   86,
       81,   81,   81,   81,   87,   81,   81,   88,   89,   81,
       81,   81,   81,   32,   32,   32,  159,   33,   34,   33,
       35,   32,   36,  160,   90,   90,   90,   90,  166,  166,
      166,   39,   92,   92,  166,   32,  166,  185,   32,  235,
      236,  100,   34,  100,   35,  186,  101,  100,   34,  100,
       35,  166,  101,  172,   43,  102,  174,  166,  215,  166,
      166,  102,   32,  173,   32,   32,  125,  175,  125,  216,

      167,   32,  176,  166,   90,   90,   90,   90,  103,  166,
      161,  168,  264,  262,  103,   32,  177,  166,   32,  169,
      192,  192,  192,  192,  194,  194,  194,  194,  196,  196,
      196,  196,  198,  198,  198,  198,  200,  200,  200,  200,
      166,  353,   32,  267,   32,   32,  204,  263,  205,  243,
      258,   32,  166,  259,   91,   91,   91,   91,  210,  226,
      211,  227,  193,  193,  266,   32,  159,  166,   32,  193,
      193,  206,  166,  160,  207,  214,  214,  214,  214,  234,
      234,  234,  234,  206,  228,  268,  207,  229,  178,  232,
      166,  233,   32,  166,   32,   32,  179,  202,  208,  202,

      209,   32,  269,  166,   91,   91,   91,   91,  244,  357,
      208,  230,  209,  231,  228,   32,  133,  229,   32,  260,
      260,  260,  260,  245,  245,  245,  245,  166,  270,  324,
      161,  134,  134,  134,  134,  218,  219,  495,  271,  235,
      236,  230,   32,  231,   32,   32,  192,  192,  192,  192,
      166,   93,  166,  319,   94,   94,   94,   94,  194,  194,
      194,  194,  204,  166,  278,   32,  335,  166,   32,  196,
      196,  196,  196,  198,  198,  198,  198,  200,  200,  200,
      200,  166,  328,  279,  281,  280,  282,  206,  193,  193,
      207,  327,   32,  325,   32,   32,  283,  166,  211,  336,

      321,   93,  322,  320,   94,   94,   94,   94,  206,  206,
      323,  207,  207,  166,  208,   32,  209,  166,   32,  166,
      338,  206,  339,  166,  207,  286,  286,  286,  286,  302,
      302,  302,  302,  326,  494,  208,  208,  209,  209,  226,
      166,  296,   32,  166,   32,   32,  166,  444,  208,  352,
      209,   95,  383,  356,   96,   96,   96,   96,  297,  299,
      298,  300,  244,  166,  228,   32,  315,  229,   32,  355,
      315,  301,  359,  233,  316,  386,  166,  309,  309,  309,
      309,  315,  310,  228,  228,  315,  229,  229,  166,  316,
      384,  230,   32,  231,   32,   32,  228,  347,  347,  229,

      166,   95,  354,  490,   96,   96,   96,   96,  166,  409,
      230,  230,  231,  231,  310,   32,  166,  486,   32,  260,
      260,  260,  260,  230,  283,  231,  280,  380,  166,  245,
      245,  245,  245,  281,  283,  205,  280,  387,  385,  281,
      410,  278,   32,  166,   32,   32,  360,  361,  166,  206,
      166,   97,  207,  166,   98,   98,   98,   98,  206,  206,
      396,  207,  207,  166,  206,   32,  388,  207,   32,  166,
      407,  311,  311,  413,  376,  210,  208,  280,  209,  286,
      286,  286,  286,  166,  427,  208,  208,  209,  209,  347,
      347,  208,   32,  209,   32,   32,  166,  281,  397,  278,

      206,   97,  411,  207,   98,   98,   98,   98,  412,  428,
      467,  301,  299,  298,  227,   32,  166,  166,   32,  166,
      485,  421,  206,  166,  166,  207,  439,  208,  429,  209,
      302,  302,  302,  302,  481,  477,  228,  228,  431,  229,
      229,  446,   32,  166,   32,  104,  301,  105,  298,  208,
       32,  209,  432,  430,  166,  423,  106,  166,  107,  108,
      108,  108,  108,  230,  230,  231,  231,  109,  441,  110,
      111,  228,  389,  112,  229,  424,  473,  166,  113,  166,
      447,  388,  442,  299,  232,  296,  298,  166,  474,  114,
      299,  166,  296,  166,  166,  166,  448,  115,  230,  116,

      231,  166,  443,  452,  117,  118,  449,  119,  228,  228,
       32,  229,  229,  457,  458,  228,   32,  459,  229,  120,
      120,  120,  120,  290,  166,  461,  465,  460,  166,  469,
      121,  310,  453,  122,  463,  230,  230,  231,  231,  166,
      166,  463,  230,  478,  231,  166,  309,  309,  309,  309,
      470,  374,  303,  466,  424,  166,  464,  123,  468,  124,
      118,  424,  119,  455,  421,   32,  401,  401,  401,  401,
      166,   32,  475,  472,  120,  120,  120,  120,  376,  401,
      401,  401,  401,  462,  484,  121,  423,  166,  122,  403,
      166,  471,  404,  403,  403,  403,  403,  403,  456,  476,

      419,  403,  403,  403,  403,  420,  424,  425,  425,  425,
      425,  442,  123,  166,  124,  437,  437,  437,  437,  452,
      438,  438,  438,  438,  166,  453,  425,  425,  425,  425,
      483,  443,  166,  166,  437,  437,  437,  437,  166,  290,
      438,  438,  438,  438,  166,  303,  479,  166,  166,  166,
      166,  482,  480,  166,  166,  455,  166,  166,  487,  488,
      166,  450,  445,  440,  436,  435,  434,  433,  426,  422,
      420,  489,  492,  419,  418,  497,  498,  496,  417,  416,
      415,  491,  414,  501,  408,  406,  405,  493,  404,  402,
      400,  399,  398,  499,  500,  395,  394,  393,  503,   32,

       32,   32,   32,   32,   32,   32,   32,   32,   32,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,  140,
      392,  391,  140,  140,  390,  140,  140,  140,  140,  146,
      382,  381,  146,  146,  146,  146,  146,  146,  146,  148,
      379,  378,  377,  148,  148,  148,  148,  148,  148,  153,
      375,  153,  153,  153,  153,  153,  153,  153,  153,  154,
      374,  373,  154,  303,  154,  154,  154,  154,  154,  164,

      164,  165,  165,  165,  171,  372,  290,  171,  171,  171,
      171,  171,  171,  201,  371,  370,  201,  201,  201,  201,
      201,  201,  201,  285,  369,  285,  285,  285,  285,  285,
      285,  285,  285,  451,  368,  451,  451,  451,  451,  451,
      451,  451,  451,  454,  367,  454,  454,  454,  454,  454,
      454,  454,  454,  366,  365,  364,  363,  362,  358,  351,
      350,  349,  348,  346,  345,  344,  343,  303,  342,  341,
      340,  290,  337,  334,  333,  332,  331,  330,  329,  318,
      317,  157,  156,  151,  150,  143,  142,  314,  313,  312,
      308,  307,  128,  127,  306,  305,  304,  303,  303,  239,

      238,  237,  295,  294,  293,  292,  291,  290,  290,  289,
      288,  287,  284,  224,  223,  220,  277,  276,  275,  274,
      273,  272,  265,  261,  166,  257,  257,  158,  256,  255,
      155,  152,  254,  253,  149,  505,  144,  252,  251,  141,
      250,  249,  248,  247,  246,  243,  242,  129,  241,  240,
      126,  239,  238,  237,  225,  224,  223,  222,  221,  220,
      217,  212,  203,  199,  197,  195,  191,  190,  189,  188,
      187,  184,  180,  166,  166,  162,  147,  145,  139,  138,
      137,  132,  131,  130,  505,   31,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,

      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505
    } ;

static const flex_int16_t yy_chk[1353] =
    {   0,
        0,    1,    1,    1,    1,    0,    1,    1,   33,   34,
       33,   34,    3,    1,    3,    1,    1,    1,    1,    1,
        4,    3,    4,   76,    5,    3,    5,    1,    5,    4,
        1,   76,   35,    4,   35,   41,   41,  519,    1,    6,
        7,    6,    7,    6,    8,   67,    8,    7,    7,  111,
      111,    8,    8,   47,    1,   47,    1,    2,    2,    2,
        2,    5,    2,    2,  503,   17,   17,   17,   17,    2,
       17,    2,    2,    2,    2,    2,    6,   82,   82,   17,
       17,   17,   40,    2,   67,   48,    2,   48,   52,   53,
       52,   53,  107,   57,    2,   57,  107,   40,   40,   40,

       40,   58,   17,   58,   63,   63,   63,   63,  500,  100,
        2,  100,    2,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   13,   60,   18,   18,   18,
       18,   13,   18,   60,   13,   13,   13,   13,   70,   69,
       73,   18,   18,   18,   72,   13,   74,   84,   13,  121,
      121,   25,   25,   25,   25,   84,   25,   26,   26,   26,
       26,   75,   26,   69,   18,   25,   72,   65,  109,  168,
      170,   26,   13,   70,   13,   14,  125,   73,  125,  109,

       65,   14,   74,  320,   14,   14,   14,   14,   25,  173,
       60,   65,  170,  168,   26,   14,   75,  169,   14,   65,
       90,   90,   90,   90,   91,   91,   91,   91,   94,   94,
       94,   94,   96,   96,   96,   96,   98,   98,   98,   98,
      172,  320,   14,  173,   14,   15,  104,  169,  104,  162,
      162,   15,  174,  162,   15,   15,   15,   15,  105,  118,
      105,  118,   90,   90,  172,   15,  159,  175,   15,  193,
      193,  104,  324,  159,  104,  108,  108,  108,  108,  120,
      120,  120,  120,  105,  118,  174,  105,  118,  178,  119,
      267,  119,   15,  176,   15,   16,  178,  202,  104,  202,

      104,   16,  175,  177,   16,   16,   16,   16,  133,  324,
      105,  118,  105,  118,  119,   16,  134,  119,   16,  163,
      163,  163,  163,  133,  133,  133,  133,  262,  176,  267,
      159,  134,  134,  134,  134,  206,  206,  491,  177,  228,
      228,  119,   16,  119,   16,   19,  192,  192,  192,  192,
      271,   19,  270,  262,   19,   19,   19,   19,  194,  194,
      194,  194,  204,  264,  204,   19,  288,  268,   19,  196,
      196,  196,  196,  198,  198,  198,  198,  200,  200,  200,
      200,  263,  271,  205,  210,  205,  210,  204,  192,  192,
      204,  270,   19,  268,   19,   20,  211,  269,  211,  288,

      264,   20,  264,  263,   20,   20,   20,   20,  205,  210,
      266,  205,  210,  319,  204,   20,  204,  266,   20,  323,
      292,  211,  292,  427,  211,  214,  214,  214,  214,  234,
      234,  234,  234,  269,  490,  205,  210,  205,  210,  226,
      357,  226,   20,  322,   20,   21,  326,  427,  211,  319,
      211,   21,  355,  323,   21,   21,   21,   21,  227,  232,
      227,  232,  244,  321,  226,   21,  257,  226,   21,  322,
      257,  233,  326,  233,  257,  357,  385,  244,  244,  244,
      244,  315,  310,  227,  232,  315,  227,  232,  352,  315,
      355,  226,   21,  226,   21,   22,  233,  310,  310,  233,

      359,   22,  321,  485,   22,   22,   22,   22,  386,  385,
      227,  232,  227,  232,  245,   22,  356,  482,   22,  260,
      260,  260,  260,  233,  278,  233,  278,  352,  360,  245,
      245,  245,  245,  279,  280,  279,  280,  359,  356,  281,
      386,  281,   22,  389,   22,   23,  327,  327,  380,  278,
      407,   23,  278,  327,   23,   23,   23,   23,  279,  280,
      370,  279,  280,  387,  281,   23,  360,  281,   23,  388,
      380,  245,  245,  389,  347,  282,  278,  282,  278,  286,
      286,  286,  286,  409,  407,  279,  280,  279,  280,  347,
      347,  281,   23,  281,   23,   24,  410,  283,  370,  283,

      282,   24,  387,  282,   24,   24,   24,   24,  388,  409,
      460,  296,  297,  296,  297,   24,  412,  460,   24,  429,
      481,  421,  283,  411,  413,  283,  421,  282,  410,  282,
      302,  302,  302,  302,  477,  473,  296,  297,  412,  296,
      297,  429,   24,  361,   24,   27,  298,   27,  298,  283,
       27,  283,  413,  411,  430,  423,   27,  431,   27,   27,
       27,   27,   27,  296,  297,  296,  297,   27,  423,   27,
       27,  298,  361,   27,  298,  423,  469,  432,   27,  447,
      430,  361,  442,  299,  300,  299,  300,  444,  470,   27,
      301,  446,  301,  449,  458,  470,  431,   27,  298,   27,

      298,  448,  442,  452,   27,   29,  432,   29,  299,  300,
       29,  299,  300,  444,  446,  301,   29,  447,  301,   29,
       29,   29,   29,  452,  465,  449,  458,  448,  461,  462,
       29,  309,  453,   29,  456,  299,  300,  299,  300,  474,
      471,  463,  301,  474,  301,  468,  309,  309,  309,  309,
      465,  374,  453,  459,  456,  467,  457,   29,  461,   29,
       30,  463,   30,  454,  401,   30,  374,  374,  374,  374,
      472,   30,  471,  468,   30,   30,   30,   30,  376,  401,
      401,  401,  401,  450,  480,   30,  403,  479,   30,  376,
      480,  467,  404,  376,  376,  376,  376,  403,  441,  472,

      419,  403,  403,  403,  403,  420,  403,  404,  404,  404,
      404,  425,   30,  476,   30,  419,  419,  419,  419,  437,
      420,  420,  420,  420,  475,  438,  425,  425,  425,  425,
      479,  425,  483,  484,  437,  437,  437,  437,  478,  437,
      438,  438,  438,  438,  487,  438,  475,  488,  489,  492,
      496,  478,  476,  493,  497,  439,  498,  499,  483,  484,
      501,  434,  428,  422,  418,  416,  415,  414,  405,  402,
      400,  484,  488,  399,  398,  493,  496,  492,  397,  394,
      393,  487,  392,  499,  384,  379,  378,  489,  377,  375,
      373,  372,  371,  497,  498,  369,  368,  367,  501,  506,

      506,  506,  506,  506,  506,  506,  506,  506,  506,  507,
      507,  507,  507,  507,  507,  507,  507,  507,  507,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  511,
      366,  364,  511,  511,  363,  511,  511,  511,  511,  512,
      354,  353,  512,  512,  512,  512,  512,  512,  512,  513,
      351,  350,  349,  513,  513,  513,  513,  513,  513,  514,
      346,  514,  514,  514,  514,  514,  514,  514,  514,  515,
      345,  344,  515,  343,  515,  515,  515,  515,  515,  516,

      516,  517,  517,  517,  518,  342,  341,  518,  518,  518,
      518,  518,  518,  520,  340,  339,  520,  520,  520,  520,
      520,  520,  520,  521,  338,  521,  521,  521,  521,  521,
      521,  521,  521,  522,  337,  522,  522,  522,  522,  522,
      522,  522,  522,  523,  336,  523,  523,  523,  523,  523,
      523,  523,  523,  335,  331,  330,  329,  328,  325,  318,
      317,  314,  313,  308,  307,  306,  305,  304,  295,  294,
      293,  291,  289,  277,  276,  275,  274,  273,  272,  259,
      258,  256,  255,  254,  253,  252,  251,  250,  249,  248,
      243,  242,  241,  240,  239,  238,  237,  236,  235,  231,

      230,  229,  224,  223,  222,  221,  220,  219,  218,  217,
      216,  215,  212,  209,  208,  207,  191,  190,  187,  185,
      183,  182,  171,  167,  165,  161,  160,  158,  157,  156,
      155,  152,  151,  150,  149,  146,  144,  143,  142,  141,
      139,  138,  137,  136,  135,  131,  130,  129,  128,  127,
      126,  124,  123,  122,  117,  116,  115,  114,  113,  112,
      110,  106,  102,   97,   95,   93,   89,   88,   87,   86,
       85,   83,   78,   71,   66,   62,   50,   49,   45,   44,
       42,   39,   38,   37,   31,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,

      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "scanaut.ll"
/* -*- coding: utf-8 -*-
** Copyright (C) 2014-2018, 2020, 2021, 2022 Laboratoire de Recherche et Développement
** de l'Epita (LRDE).
**
** This file is part of Spot, a model checking library.
**
** Spot is free software; you can redistribute it and/or modify it
** under the terms of the GNU General Public License as published by
** the Free Software Foundation; either version 3 of the License, or
** (at your option) any later version.
**
** Spot is distributed in the hope that it will be useful, but WITHOUT
** ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
** or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
** License for more details.
**
** You should have received a copy of the GNU General Public License
** along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
/* %option debug */

#line 42 "scanaut.ll"
#include <string>
#include <sys/stat.h>
#include <spot/parseaut/parsedecl.hh>
#include "spot/priv/trim.hh"

#define YY_USER_ACTION yylloc->columns(yyleng);

typedef hoayy::parser::token token;

struct extra_data
{
  unsigned comment_level = 0;
  unsigned parent_level = 0;
  int orig_cond = 0;
  bool lbtt_s = false;
  bool lbtt_t = false;
  unsigned lbtt_states = 0;
  bool yyin_close = true;
};

#line 1157 "scanaut.cc"
/* A pattern than match the start of an automaton, in order
to detect the end of the previous one.  We do not try to match
LBTT automata here. */

#line 1162 "scanaut.cc"

#define INITIAL 0
#define in_COMMENT 1
#define in_STRING 2
#define in_NEVER_PAR 3
#define in_HOA 4
#define in_NEVER 5
#define in_LBTT_HEADER 6
#define in_LBTT_STATE 7
#define in_LBTT_INIT 8
#define in_LBTT_TRANS 9
#define in_LBTT_T_ACC 10
#define in_LBTT_S_ACC 11
#define in_LBTT_GUARD 12
#define in_DSTAR 13
#define in_PGAME 14

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#define YY_EXTRA_TYPE struct extra_data*

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  , yyscan_t yyscanner);
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (yyscan_t yyscanner);

#define YY_DECL int yylex (yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 80 "scanaut.ll"



#line 84 "scanaut.ll"
  std::string s;
  yylloc->step();

  auto parse_int = [&](){
    errno = 0;
    char* end;
    unsigned long n = strtoul(yytext, &end, 10);
    yylval->num = n;
    if (errno || yylval->num != n)
      {
        error_list.push_back(spot::parse_aut_error(*yylloc, "value too large"));
        yylval->num = 0;
      }
    return end;
  };



                        /* skip blanks and comments */
#line 1458 "scanaut.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 506 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1286 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 103 "scanaut.ll"
yylloc->lines(yyleng); yylloc->step();
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 104 "scanaut.ll"
yylloc->lines(yyleng / 2); yylloc->step();
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 105 "scanaut.ll"
yylloc->step();
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 106 "scanaut.ll"
{
                          yyextra->orig_cond = YY_START;
			  BEGIN(in_COMMENT);
			  yyextra->comment_level = 1;
			}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 111 "scanaut.ll"
{
			    errno = 0;
			    char* end;
			    unsigned long n = strtoul(yytext + 5, &end, 10);
			    yylval->num = n;
			    if (errno || yylval->num != n)
                              {
			         error_list.push_back(spot::parse_aut_error(*yylloc, "value too large"));                             }
                            else if (error_list.empty())
                              {
			         char* beg = strchr(end, '"');
                                 end = strrchr(beg + 1, '"');
			         yylval->str = new std::string(beg + 1, end);
                                 yylloc->initialize(nullptr, n - 1, yylloc->begin.column);
                                 return token::LINEDIRECTIVE;
                              }
                            else
                              {
			         error_list.push_back(spot::parse_aut_error(*yylloc, "#line may not occur after any error"));
                              }
                          }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 132 "scanaut.ll"
BEGIN(in_HOA); return token::HOA;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 133 "scanaut.ll"
BEGIN(INITIAL); throw spot::hoa_abort{*yylloc};
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 134 "scanaut.ll"
BEGIN(in_NEVER); return token::NEVER;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 135 "scanaut.ll"
BEGIN(in_DSTAR); return token::DSA;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 136 "scanaut.ll"
BEGIN(in_DSTAR); return token::DRA;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 137 "scanaut.ll"
{
                          BEGIN(in_PGAME);
			  char* end = nullptr;
			  errno = 0;
			  unsigned long n = strtoul(yytext + 7, &end, 10);
			  yylval->num = n;
                          return token::PGAME;
                          }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 145 "scanaut.ll"
{
                          BEGIN(in_PGAME);
			  yylval->num = 0;
                          yyless(0);
                          return token::PGAME;
                          }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 151 "scanaut.ll"
{
	                  BEGIN(in_LBTT_HEADER);
			  char* end = nullptr;
			  errno = 0;
			  unsigned long n = strtoul(yytext, &end, 10);
			  yylval->num = n;
			  unsigned s = end - yytext;
			  yylloc->end = yylloc->begin;
 			  yylloc->end.columns(s);
			  yyless(s);
			  if (errno || yylval->num != n)
			    {
                              error_list.push_back(
			        spot::parse_aut_error(*yylloc,
				  "value too large"));
			      yylval->num = 0;
                            }
                          yyextra->lbtt_states = yylval->num;
			  return token::LBTT;
			}
	YY_BREAK

case 14:
YY_RULE_SETUP
#line 173 "scanaut.ll"
return token::STATES;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 174 "scanaut.ll"
return token::START;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 175 "scanaut.ll"
return token::AP;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 176 "scanaut.ll"
return token::ALIAS;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 177 "scanaut.ll"
return token::ACCEPTANCE;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 178 "scanaut.ll"
return token::ACCNAME;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 179 "scanaut.ll"
return token::CONTROLLABLE_AP;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 180 "scanaut.ll"
return token::TOOL;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 181 "scanaut.ll"
return token::NAME;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 182 "scanaut.ll"
return token::PROPERTIES;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 183 "scanaut.ll"
return token::SPOT_HIGHLIGHT_STATES;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 184 "scanaut.ll"
return token::SPOT_HIGHLIGHT_EDGES;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 185 "scanaut.ll"
return token::SPOT_STATE_PLAYER;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 186 "scanaut.ll"
return token::BODY;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 187 "scanaut.ll"
BEGIN(INITIAL); return token::END;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 188 "scanaut.ll"
return token::STATE;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 189 "scanaut.ll"
{
                          // For labels that do not span over several lines,
                          // we look them up in fmap to speed the construction
                          // of automata that use the same label multiple times.
                          std::string* s =
                              new std::string(yytext + 1, yyleng - 2);
                          if (auto i = fmap.find(*s); i != fmap.end())
                             {
                                delete s;
                                yylval->b = i->second.id();
                                return token::BDD;
                             }
                          yylval->str = s;
                          yylloc->end = yylloc->begin + 1;
                          yyless(1);
                          return *yytext;
                        }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 206 "scanaut.ll"
{
                          yylval->str = nullptr;
                          return *yytext;
                        }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 210 "scanaut.ll"
return *yytext;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 212 "scanaut.ll"
{
			   yylval->str = new std::string(yytext, yyleng);
			   return token::IDENTIFIER;
			}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 216 "scanaut.ll"
{
			   yylval->str = new std::string(yytext, yyleng - 1);
			   return token::HEADERNAME;
			}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 220 "scanaut.ll"
{
			   yylval->str = new std::string(yytext + 1, yyleng - 1);
			   return token::ANAME;
			}
	YY_BREAK
/* Handle short numbers without going through parse_int() for efficiency. */
case 36:
YY_RULE_SETUP
#line 225 "scanaut.ll"
yylval->num = *yytext - '0'; return token::INT;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 226 "scanaut.ll"
{
                          yylval->num = (yytext[0] * 10) + yytext[1] - '0' * 11;
                          return token::INT;
                        }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 230 "scanaut.ll"
parse_int(); return token::INT;
	YY_BREAK


case 39:
YY_RULE_SETUP
#line 234 "scanaut.ll"
return token::STATES;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 235 "scanaut.ll"
return token::STATE;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 236 "scanaut.ll"
return token::START;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 237 "scanaut.ll"
return token::AP;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 238 "scanaut.ll"
return token::V2;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 239 "scanaut.ll"
return token::EXPLICIT;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 240 "scanaut.ll"
yylloc->step();
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 241 "scanaut.ll"
yylloc->step();
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 242 "scanaut.ll"
return token::ACCPAIRS;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 243 "scanaut.ll"
return token::ACCSIG;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 244 "scanaut.ll"
return token::ENDOFHEADER;
	YY_BREAK
/* Handle short numbers without going through parse_int() for efficiency. */
case 50:
YY_RULE_SETUP
#line 246 "scanaut.ll"
yylval->num = *yytext - '0'; return token::INT;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 247 "scanaut.ll"
{
                          yylval->num = (yytext[0] * 10) + yytext[1] - '0' * 11;
                          return token::INT;
                        }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 251 "scanaut.ll"
parse_int(); return token::INT;
	YY_BREAK
/* The start of any automaton is the end of this one. */
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 253 "scanaut.ll"
{
			  yylloc->end = yylloc->begin;
			  yyless(0);
			  BEGIN(INITIAL);
			  return token::ENDDSTAR;
			}
	YY_BREAK
case YY_STATE_EOF(in_DSTAR):
#line 259 "scanaut.ll"
return token::ENDDSTAR;
	YY_BREAK


case 54:
YY_RULE_SETUP
#line 263 "scanaut.ll"
return token::SKIP;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 264 "scanaut.ll"
return token::IF;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 265 "scanaut.ll"
return token::FI;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 266 "scanaut.ll"
return token::DO;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 267 "scanaut.ll"
return token::OD;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 268 "scanaut.ll"
return token::ARROW;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 269 "scanaut.ll"
return token::GOTO;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 270 "scanaut.ll"
return token::FALSE;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 271 "scanaut.ll"
return token::ATOMIC;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 272 "scanaut.ll"
return token::ASSERT;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 274 "scanaut.ll"
{
			  yyextra->parent_level = 1;
			  BEGIN(in_NEVER_PAR);
			  yylval->str = new std::string(yytext, yyleng);
			}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 280 "scanaut.ll"
{
                          yylval->str = new std::string(yytext, yyleng);
			  return token::FORMULA;
                        }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 285 "scanaut.ll"
{
			  yylval->str = new std::string(yytext, yyleng);
	                  return token::IDENTIFIER;
		        }
	YY_BREAK


/* Handle short numbers without going through parse_int() for efficiency. */
case 67:
YY_RULE_SETUP
#line 293 "scanaut.ll"
yylval->num = *yytext - '0'; return token::INT;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 294 "scanaut.ll"
{
                          yylval->num = (yytext[0] * 10) + yytext[1] - '0' * 11;
                          return token::INT;
                        }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 298 "scanaut.ll"
parse_int(); return token::INT;
	YY_BREAK
/* The start of any automaton is the end of this one. */
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 300 "scanaut.ll"
{
			  yylloc->end = yylloc->begin;
			  yyless(0);
			  BEGIN(INITIAL);
			  return token::ENDPGAME;
			}
	YY_BREAK
case YY_STATE_EOF(in_PGAME):
#line 306 "scanaut.ll"
return token::ENDPGAME;
	YY_BREAK

/* Note: the LBTT format is scanf friendly, but not Bison-friendly.
     If we only tokenize it as a stream of INTs, the parser will have
     a very hard time recognizing what is a state from what is a
     transitions.  As a consequence we abuse the start conditions to
     maintain a state an return integers with different semantic types
     depending on the purpose of those integers. */

case 71:
YY_RULE_SETUP
#line 316 "scanaut.ll"
{
			  BEGIN(in_LBTT_STATE);
                          auto end = parse_int();
			  yyextra->lbtt_s = false;
			  yyextra->lbtt_t = false;
			  if (end)
			    while (int c = *end++)
			      {
			         if (c == 's')
			           yyextra->lbtt_s = true;
			         else // c == 't'
			           yyextra->lbtt_t = true;
			      }
  		          if (!yyextra->lbtt_t)
			    yyextra->lbtt_s = true;
			  if (yyextra->lbtt_states == 0)
			    {
                              BEGIN(INITIAL);
                              return token::LBTT_EMPTY;
			    }
			  if (yyextra->lbtt_s && !yyextra->lbtt_t)
			    return token::INT_S;
			  else
			    return token::INT;
			}
	YY_BREAK

case 72:
YY_RULE_SETUP
#line 343 "scanaut.ll"
{
                           parse_int();
			   BEGIN(in_LBTT_INIT);
			   return token::STATE_NUM;
			}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 348 "scanaut.ll"
{
                           yylval->num = *yytext - '0';
			   if (yyextra->lbtt_s)
			      BEGIN(in_LBTT_S_ACC);
			   else
			      BEGIN(in_LBTT_TRANS);
			   return token::INT;
			}
	YY_BREAK

case 74:
YY_RULE_SETUP
#line 357 "scanaut.ll"
parse_int(); return token::ACC;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 358 "scanaut.ll"
BEGIN(in_LBTT_TRANS); yylloc->step();
	YY_BREAK


case 76:
YY_RULE_SETUP
#line 361 "scanaut.ll"
{
			  parse_int();
			  if (yyextra->lbtt_t)
			    BEGIN(in_LBTT_T_ACC);
			  else
			    BEGIN(in_LBTT_GUARD);
			  return token::DEST_NUM;
			}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 369 "scanaut.ll"
{
                          if (--yyextra->lbtt_states)
			    {
			       BEGIN(in_LBTT_STATE);
			       yylloc->step();
			    }
			  else
			    {
			       BEGIN(INITIAL);
			       return token::ENDAUT;
			    }
			}
	YY_BREAK


case 78:
YY_RULE_SETUP
#line 383 "scanaut.ll"
parse_int(); return token::ACC;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 384 "scanaut.ll"
BEGIN(in_LBTT_GUARD); yylloc->step();
	YY_BREAK


case 80:
YY_RULE_SETUP
#line 387 "scanaut.ll"
{
  			  yylval->str = new std::string(yytext, yyleng);
			  BEGIN(in_LBTT_TRANS);
 			  return token::STRING;
			}
	YY_BREAK


case 81:
YY_RULE_SETUP
#line 396 "scanaut.ll"
++yyextra->comment_level;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 397 "scanaut.ll"
continue;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 398 "scanaut.ll"
continue;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 399 "scanaut.ll"
continue;
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 400 "scanaut.ll"
yylloc->lines(yyleng); yylloc->end.column = 1;
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 401 "scanaut.ll"
yylloc->lines(yyleng / 2); yylloc->end.column = 1;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 402 "scanaut.ll"
{
			  if (--yyextra->comment_level == 0)
			    {
			      yylloc->step();
                              int oc = yyextra->orig_cond;
		              BEGIN(oc);
		            }
                        }
	YY_BREAK
case YY_STATE_EOF(in_COMMENT):
#line 410 "scanaut.ll"
{
                           int oc = yyextra->orig_cond;
	                   BEGIN(oc);
                           error_list.push_back(
			     spot::parse_aut_error(*yylloc,
			       "unclosed comment"));
			   return 0;
                        }
	YY_BREAK

/* matched late, so that the in_LBTT_GUARD pattern has precedence */
case 88:
YY_RULE_SETUP
#line 421 "scanaut.ll"
{
                          yyextra->orig_cond = YY_START;
			  BEGIN(in_STRING);
			  yyextra->comment_level = 1;
			}
	YY_BREAK

case 89:
YY_RULE_SETUP
#line 428 "scanaut.ll"
{
                           int oc = yyextra->orig_cond;
                           BEGIN(oc);
			   yylval->str = new std::string(s);
			   return token::STRING;
 			}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 434 "scanaut.ll"
{
  			  s.append(yytext, yyleng);
                          yylloc->lines(yyleng); yylloc->end.column = 1;
			}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 438 "scanaut.ll"
{
  			  s.append(yytext, yyleng);
                          yylloc->lines(yyleng / 2); yylloc->end.column = 1;
			}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 442 "scanaut.ll"
s += yytext[1];
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 443 "scanaut.ll"
s.append(yytext, yyleng);
	YY_BREAK
case YY_STATE_EOF(in_STRING):
#line 444 "scanaut.ll"
{
                           error_list.push_back(
			     spot::parse_aut_error(*yylloc,
			       "unclosed string"));
                           int oc = yyextra->orig_cond;
                           BEGIN(oc);
			   yylval->str = new std::string(s);
			   return token::STRING;
                        }
	YY_BREAK


case 94:
YY_RULE_SETUP
#line 456 "scanaut.ll"
{
			  ++yyextra->parent_level;
			  yylval->str->append(yytext, yyleng);
			}
	YY_BREAK
/* if we match ")&&(" or ")||(", stay in <in_NEVER_PAR> mode */
case 95:
YY_RULE_SETUP
#line 461 "scanaut.ll"
{
	                  yylval->str->append(yytext, yyleng);
			}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 464 "scanaut.ll"
{
	                  yylval->str->append(yytext, yyleng);
			  if (!--yyextra->parent_level)
			    {
                              BEGIN(in_NEVER);
			      spot::trim(*yylval->str);
			      return token::FORMULA;
			    }
			}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 473 "scanaut.ll"
{
                          yylval->str->append(yytext, yyleng);
			  yylloc->lines(yyleng); yylloc->end.column = 1;
			}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 477 "scanaut.ll"
{
			  yylval->str->append(yytext, yyleng);
  			  yylloc->lines(yyleng / 2); yylloc->end.column = 1;
			}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 481 "scanaut.ll"
yylval->str->append(yytext, yyleng);
	YY_BREAK
case YY_STATE_EOF(in_NEVER_PAR):
#line 482 "scanaut.ll"
{
                          error_list.push_back(
			    spot::parse_aut_error(*yylloc,
 			      "missing closing parenthese"));
                          yylval->str->append(yyextra->parent_level, ')');
                          BEGIN(in_NEVER);
			  spot::trim(*yylval->str);
			  return token::FORMULA;
			}
	YY_BREAK

case 100:
YY_RULE_SETUP
#line 493 "scanaut.ll"
{
                          yylval->str = nullptr;
                          return *yytext;
                        }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 498 "scanaut.ll"
return *yytext;
	YY_BREAK

  /* Dummy use of yyunput to shut up a gcc warning.  */
  (void) &yyunput;

case 102:
YY_RULE_SETUP
#line 505 "scanaut.ll"
ECHO;
	YY_BREAK
#line 2332 "scanaut.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(in_HOA):
case YY_STATE_EOF(in_NEVER):
case YY_STATE_EOF(in_LBTT_HEADER):
case YY_STATE_EOF(in_LBTT_STATE):
case YY_STATE_EOF(in_LBTT_INIT):
case YY_STATE_EOF(in_LBTT_TRANS):
case YY_STATE_EOF(in_LBTT_T_ACC):
case YY_STATE_EOF(in_LBTT_S_ACC):
case YY_STATE_EOF(in_LBTT_GUARD):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 506 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 506 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 505);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 505 "scanaut.ll"


namespace spot
{
  void
  hoayyreset(yyscan_t yyscanner)
  {
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    BEGIN(INITIAL);
    yyextra->comment_level = 0;
    yyextra->parent_level = 0;
  }

  int
  hoayyopen(const std::string &name, yyscan_t* scanner)
  {
    yylex_init_extra(new extra_data, scanner);
    yyscan_t yyscanner = *scanner;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    bool want_interactive = false;

    // yy_flex_debug = 1;
    if (name == "-")
      {
        // If the input is a pipe, make the scanner
        // interactive so that it does not wait for the input
        // buffer to be full to process automata.
        struct stat s;
        if (fstat(fileno(stdin), &s) < 0)
           throw std::runtime_error("fstat failed");
	if (S_ISFIFO(s.st_mode))
	  want_interactive = true;

        yyin = stdin;
        yyextra->yyin_close = false;
      }
    else
      {
        yyin = fopen(name.c_str(), "r");
        if (!yyin)
	  return 1;
        yyextra->yyin_close = true;
      }

    if (want_interactive)
      yy_set_interactive(1);
    return 0;
  }

  int
  hoayystring(const char* data, yyscan_t* scanner)
  {
    yylex_init_extra(new extra_data, scanner);
    yy_scan_string(data, *scanner);
    return 0;
  }

  int
  hoayyopen(int fd, yyscan_t* scanner)
  {
    yylex_init_extra(new extra_data, scanner);
    yyscan_t yyscanner = *scanner;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    bool want_interactive = false;
    yyextra->yyin_close = false;

    yyin = fdopen(fd, "r");

    if (!yyin)
      throw std::runtime_error("fdopen failed");

    // If the input is a pipe, make the scanner
    // interactive so that it does not wait for the input
    // buffer to be full to process automata.
    struct stat s;
    if (fstat(fd, &s) < 0)
      throw std::runtime_error("fstat failed");
    if (S_ISFIFO(s.st_mode))
      want_interactive = true;

    if (want_interactive)
      yy_set_interactive(1);
    return 0;
  }

  void
  hoayyclose(yyscan_t yyscanner)
  {
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    if (yyin)
      {
        if (yyextra->yyin_close)
          fclose(yyin);
        yyin = NULL;
      }
    delete yyextra;
    yylex_destroy(yyscanner);
  }
}


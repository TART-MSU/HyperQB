--
-- // SNARK structure (with some accelerations):
-- // 0   ------- STAND BY: could go to line:1/ line:10/ line:19
-- // 	  popRight() starts:
-- // 1   - getRightHat as rh
-- // 2		- getLeftHat as lh
-- // 3		- if (rh is self-pointing) return assign popRight_FAIL
-- // 4 	- else if (rh equals lh)
-- // 5			DCAS (RightHat, LeftHat, rh, lh, Dummy, Dummy)
-- // 6			assign pop_result as rh->V
-- // 7		- else  assign rhl as rh->L
-- // 8				DCAS (RightHat, rh->L, rh, rhL, rhL, rh)
-- // 9				assign popRight_result as rh->V, assign rh->R as DUMMY
-- //     pushRight() starts:
-- // 10    - assing nd as Y --> if null, return pushRight_FAIL
-- // 11		- assign nd->R as Dummy,assign nd-> V as something (zero for now)
-- // 12		- assign rh as RightHat, assign rhR as rh->R
-- // 13		if (rh == rhR), assign nd -> L = Dummy, assign lh = LeftHat
-- // 14			 DCAS (RightHat, LeftHat, rh, lh, nd, nd)
-- // 15			 return pushRight_SUCCESS
-- // 16		else   assign nd->L as rh
-- // 17			   DCAS(RightHat, rh->R, rh, rhR, nd, nd)
-- // 18			   return pushRight_SUCCESS
-- //  	  popLeft() starts:
-- // 19		- assign lh as LeftHat, assign rh as RightHat
-- // 20		- if (lh is self-pointing), return assign popLeft_FAIL
-- // 21		- else if (lh == rh)
-- // 22				DCAS (LeftHat, RightHat, lh, rh, Dummy, Dummy)
-- // 23				assign popLeft_result as lh -> V
-- // 24		- else  assign lhR as lh->R
-- // 25				DCAS (LeftHat, lh->R, lh, lhR, lfR, lh)
-- // 26				assign popLeft_result as lh->V, assign lh_L as DDUMMY


--  NODE ID: DUMMY=0 x=1, y=2, z=3
--  Each node has three data:[leftpointer, value, rightpointer]

MODULE main
VAR
	-- RightHat: array 0..1 of 0..2;
	-- LeftHat:  array 0..1 of 0..2;
	RightHat: 0..2; -- could be DUNNY, x, y, or z
	LeftHat: 0..2; -- could be DUMMY, x, y, or z
	AllNodes: array 0..2 of array 0..1 of 0..2; -- store X,Y,Z and their pointers, ignore DUMMY

	First_ProcID: 1..2;
	Second_ProcID: 1..2;

	--- ('process' is problmatic)
	-- proc1: process SNARK(RightHat, LeftHat, AllNodes);
	-- proc2: process SNARK(RightHat, LeftHat, AllNodes);

	-- with
	proc1: SNARK(LeftHat, RightHat, AllNodes, First_ProcID);
	proc2: SNARK(LeftHat, RightHat, AllNodes, Second_ProcID);

	GlobalQueue: Queue(LeftHat, RightHat, AllNodes, proc1, proc2);

	ASSIGN

		init(First_ProcID) 	:= 1;
		init(Second_ProcID) := 2;
		next(First_ProcID)	:= First_ProcID;
		next(Second_ProcID)	:= Second_ProcID;

	--  NODE ID: DUMMY=0 x=1, y=2, z=3

		-- EMPTY QUEUE --
		-- init(RightHat) := 0;
		-- init(LeftHat) := 0;
		-- init(AllNodes[0][0]) := 0;
		-- init(AllNodes[0][1]) := 0; -- X
		-- init(AllNodes[1][0]) := 1;
		-- init(AllNodes[1][1]) := 1; -- Y
		-- init(AllNodes[2][0]) := 2;
		-- init(AllNodes[2][1]) := 2; -- Z

		-- -- if [DUMMY ---  X --- DUMMY]
		init(RightHat) := 1;
		init(LeftHat) := 1;
		init(AllNodes[0][0]) := 0;
		init(AllNodes[0][1]) := 0; -- DUMMY
		init(AllNodes[1][0]) := 0;
		init(AllNodes[1][1]) := 0; -- X
		init(AllNodes[2][0]) := 2;
		init(AllNodes[2][1]) := 2; -- Y


		-- -- if [DUMMY ---  X -- Y --- DUMMY]
		-- init(RightHat) := 2;
		-- init(LeftHat) := 1;
		-- init(AllNodes[0][0]) := 0;
		-- init(AllNodes[0][1]) := 0; -- DUMMY
		-- init(AllNodes[1][0]) := 0;
		-- init(AllNodes[1][1]) := 2; -- X
		-- init(AllNodes[2][0]) := 1;
		-- init(AllNodes[2][1]) := 0; -- Y



		MODULE Queue(LeftHat, RightHat, AllNodes, proc1, proc2)
		-- CHANGING GLOBAL VARIABLEs

		VAR
			newnode : 0..2; -- for push right
			popRightFAIL: boolean;
			-- FAIL: boolean;


		ASSIGN
			init(newnode) := 2;
			next(newnode) := newnode;

			-- to cehck, use GlobalQueue-popRightFAIL[tid]
			init(popRightFAIL) := FALSE;
			next(popRightFAIL) :=
				case
					((proc1.line=3) & (proc1.local_popR_RH=1 & AllNodes[1][1]=1)) : TRUE;
					((proc1.line=3) & (proc1.local_popR_RH=2 & AllNodes[2][1]=2)) : TRUE;
					((proc2.line=3) & (proc2.local_popR_RH=0)) : TRUE;
					TRUE: popRightFAIL;
				esac;

			next(RightHat) :=
				case
					BOTH_MODIFYING : RightHat;
					-- (line=5) : 0;
					-- ((proc1.line=5 & proc1.local_popR_RH=RightHat & proc1.local_popR_LH=LeftHat) |
					-- 		(proc2.line=5 & proc2.local_popR_RH=RightHat & proc2.local_popR_LH=LeftHat)) : 0; -- set to DUMMY

					((proc1.line=5 & !FAIL) | (proc2.line=5 & !FAIL)) : 0; -- set to DUMMY

					-- ((proc1.line=22) | (proc2.line=22)) : 0; -- set to DUMMY
					((proc1.line=22 & RightHat=proc1.local_popL_RH) | (proc2.line=22 & RightHat=proc2.local_popL_RH)) : 0; -- set to DUMMY
					-- ((proc1.line=8)) : proc1.local_popR_RHL; -- set to RH->L of proc1
					-- DCAS
					((proc1.line=8) & !FAIL & (proc1.local_popR_RHL=0)) : 0; -- set to RH->L 0
					((proc1.line=8) & !FAIL & (proc1.local_popR_RHL=1)) : 1; -- set to RH->L 0
					((proc1.line=8) & !FAIL & (proc1.local_popR_RHL=2)) : 2; -- set to RH->L 0
					-- ((proc2.line=8)) : proc2.local_popR_RHL; -- set to RH->L of proc2
					-- DCAS
					((proc2.line=8) & !FAIL & (proc2.local_popR_RHL=0)) : 0; -- set to RH->L 0
					((proc2.line=8) & !FAIL & (proc2.local_popR_RHL=1)) : 1; -- set to RH->L 0
					((proc2.line=8) & !FAIL & (proc2.local_popR_RHL=2)) : 2; -- set to RH->L 0
					-- (line=14) : local_pushR_newnode; -- set to new node
					((proc1.line=14) | (proc2.line=14)) : 2; -- set to newnode
					-- ((proc1.line=14) | (proc2.line=14)) : proc1.local_pushR_newnode; -- set to newnode
					-- (line=17) : local_pushR_newnode; -- set to new node
					((proc1.line=16 & RightHat=proc1.local_pushR_RH) |
							(proc2.line=16 & RightHat=proc2.local_pushR_RH)) : 2;
					-- ((proc1.line=17) | (proc2.line=17)) : proc1.local_pushR_newnode;
					TRUE: RightHat;
				esac;

			next(LeftHat) :=
				case
					BOTH_MODIFYING : LeftHat;
					-- ((proc1.line=5) | (proc2.line=5)) : 0; -- set toDUMMY
					--- SWAP if DCAS
					-- ((proc1.line=5 & proc1.local_popR_RH=RightHat & proc1.local_popR_LH=LeftHat) |
					-- 				(proc2.line=5 & proc2.local_popR_RH=RightHat & proc2.local_popR_LH=LeftHat)) : 0; -- set toDUMMY
					((proc1.line=5 & !FAIL) | (proc2.line=5 & !FAIL)) : 0; -- set to DUMMY

					-- SWAP if DCAS
					((proc1.line=22 & RightHat=proc1.local_popL_RH) | (proc2.line=22 & RightHat=proc2.local_popL_RH)) : 0; -- set to DUMMY
					-- ((proc1.line=22 & RightHat=proc1.local_pushR_RH) | (proc2.line=22 & RightHat=proc2.local_pushR_RH)) : 0; -- set to DUMMY

					-- ((proc1.line=25) & (proc1.local_popL_LHR=0)) : 0; -- set to LH->R 0
					-- ((proc1.line=25) & (proc1.local_popL_LHR=1)) : 1; -- set to LH->R 0
					-- ((proc1.line=25) ) : 2; -- set to LH->R 0

					((proc1.line=25) & (proc1.local_popL_LHR=0)) : 0; -- set to LH->R 0
					((proc1.line=25) & (proc1.local_popL_LHR=1)) : 1; -- set to LH->R 0
					((proc1.line=25) & (proc1.local_popL_LHR=2)) : 2; -- set to LH->R 0

					((proc2.line=25) & (proc2.local_popL_LHR=0)) : 0; -- set to LH->R 0
					((proc2.line=25) & (proc2.local_popL_LHR=1)) : 1; -- set to LH->R 0
					((proc2.line=25) & (proc2.local_popL_LHR=2)) : 2; -- set to LH->R 0

					((proc1.line=14) | (proc2.line=14)) : 2; --set to newnode
					-- ((proc1.line=14) | (proc2.line=14)) : proc1.local_pushR_newnode; --set to newnode
					TRUE: LeftHat;
				esac;

				--- GLOBAL variables for double-ended queue
				next(AllNodes[0][0]) := AllNodes[0][0]; -- DUMMY
				next(AllNodes[0][1]) := AllNodes[0][1]; -- DUMMY

				-- X -> L
				next(AllNodes[1][0]) :=
					case
						BOTH_MODIFYING: AllNodes[1][0]; --?

						((proc1.line=8) & !FAIL & (proc1.local_popR_RH=1)): 1;
						-- ??
						((proc1.line=26) & (proc1.local_popL_LH=1) & (LeftHat=1)): 0;

						-- ((proc2.line=8) & (proc2.local_popR_RH=1)): 1;
						((proc2.line=8) & !FAIL & (proc2.local_popR_RH=1)): 1;
						-- ??
						((proc2.line=26) & (proc2.local_popL_LH=1) & (LeftHat=1)): 0;
						TRUE: AllNodes[1][0];
					esac;

				-- X -> R
				next(AllNodes[1][1]) :=
					case
						BOTH_MODIFYING : AllNodes[1][1]; --?

						((proc1.line=17) & (proc1.local_pushR_RH=1)): 2; -- newnode
						((proc1.line=25) & !FAIL & (proc1.local_popL_LH=1)): 1;
						--- ?
						((proc1.line=9) & (proc1.local_popR_RH=1)& (RightHat=1)): 0;
						-- ((proc1.line=9) & (RightHat=1)): 0;

						((proc2.line=17) & (proc2.local_pushR_RH=1)): 2; -- newnode
						((proc2.line=25) & !FAIL & (proc2.local_popL_LH=1)): 1;
						--- ?
						((proc2.line=9) & (proc2.local_popR_RH=1) & (RightHat=1)): 0;
						-- ((proc2.line=9) & (RightHat=1)): 0;
						TRUE: AllNodes[1][1];
					esac;

				-- Y -> L
				next(AllNodes[2][0]) :=
					case
						BOTH_MODIFYING : AllNodes[2][0];

						((proc1.line=8) & !FAIL & (proc1.local_popR_RH=2)) : 2;
						-- ?
						((proc1.line=26) & (proc1.local_popL_LH=2) & (LeftHat=2)): 0;
						-- ((proc1.line=26) & (LeftHat=2)): 0;

						((proc1.line=16) & proc1.local_pushR_RH=1): 1;
						((proc1.line=16) & proc1.local_pushR_RH=2): 2;

						((proc2.line=8) & !FAIL & (proc2.local_popR_RH=2)) : 2;
						-- ?
						((proc2.line=26) & (proc2.local_popL_LH=2) & (LeftHat=2)): 0;
						-- ((proc2.line=26) & (LeftHat=2)): 0;

						((proc2.line=16) & proc2.local_pushR_RH=1): 1;
						((proc2.line=16) & proc2.local_pushR_RH=2): 2;
						TRUE: AllNodes[2][0];
					esac;

				-- Y -> R
				next(AllNodes[2][1]) :=
					case
						BOTH_MODIFYING : AllNodes[2][1];

						(proc1.line=11): 0;
						-- ((proc1.line=17) & (proc1.local_pushR_RH=1)): 2; -- if another pushRight
						-- ???
						((proc1.line=9) & (proc1.local_popR_RH=2) & (RightHat=2)): 0;
						-- ((proc1.line=9) & (RightHat=2)): 0;
						((proc1.line=25) & !FAIL & (proc1.local_popL_LH=2)): 2;


						(proc2.line=11): 0;
						-- ((proc1.line=17) & (proc1.local_pushR_RH=1)): 2; -- if another pushRight
						-- ???
						((proc1.line=9) & (proc1.local_popR_RH=2) & (RightHat=2)): 0;
						-- ((proc2.line=9) & (RightHat=2)): 0;
						((proc2.line=25) & !FAIL & (proc2.local_popL_LH=2)): 2;
						TRUE: AllNodes[2][1];
					esac;



					-- --- when DCAS fails, error
					-- init(FAIL) := false;
					-- next(FAIL) :=
					-- 	case
					-- 		((proc1.line=8) & (!(RightHat=proc1.local_popR_RH) \/
					-- 							 				 !(proc1.local_popR_RH=1 & (AllNodes[1][0]=proc1.local_popR_RHL)) \/
					-- 											 !(proc1.local_popR_RH=2 & (AllNodes[2][0]=proc1.local_popR_RHL))))
					-- 	esac;

					DEFINE
						BOTH_MODIFYING := (proc1.modifying & proc2.modifying);
						FAIL :=	 ((proc1.line=5) & (	!(RightHat=proc1.local_popR_RH)
										 				 							 	| !(LeftHat=proc1.local_popR_LH)))
												|((proc1.line=8) & (  !(RightHat=proc1.local_popR_RH)
																 				 		| !(proc1.local_popR_RH=1 -> (AllNodes[1][0]=proc1.local_popR_RHL))
																						| !(proc1.local_popR_RH=2 -> (AllNodes[2][0]=proc1.local_popR_RHL))))
												|((proc1.line=22) & (	!(RightHat=proc1.local_popL_RH)
																 				 		| !(LeftHat=proc1.local_popL_LH)))
												|((proc1.line=25) & (  !(LeftHat=proc1.local_popL_LH)
																 				 		| !(proc1.local_popL_LH=1 -> (AllNodes[1][1]=proc1.local_popL_LHR))
																						| !(proc1.local_popL_LH=2 -> (AllNodes[2][1]=proc1.local_popL_LHR))))
													--- if full
												|((proc1.line=13) & RightHat=2)
												|((proc2.line=13) & RightHat=2)
												|((proc2.line=20) & RightHat=0 & RightHat=0)
												| BOTH_MODIFYING;





MODULE SNARK(LeftHat, RightHat, AllNodes, ProcID)
VAR
	line: 0..26;
	-- popRight local variables
	local_popR_RH: 0..2; -- could be DUMMY, x,or y
	local_popR_LH: 0..2; -- could be DUMMY, x,or y
	local_popR_RHL: 0..2; -- could be DUMMY, x,or y
	-- local_popR_return_empty: boolean; -- move to global queue

	-- popLeft local variables
	local_popL_RH: 0..2; -- could be DUMMY, x,or y
	local_popL_LH: 0..2; -- could be DUMMY, x,or y
	local_popL_LHR: 0..2; -- could be DUMMY, x,or y

	-- pushRight local variables
	-- local_pushR_newnode: array 0..2 of 0..2;
	-- local_pushR_newnode: 0..2;
	local_pushR_RH: 0..2; -- could be DUMMY, x,or y
	local_pushR_RHR: 0..2; -- xcould be DUMMY, x,or y
	local_pushR_LH: 0..2; -- could be DUMMY, x,or y



ASSIGN

	init(line) := 0;

	-- popRight local, all default to DUMMY
	init(local_popR_RH) := 0;
	init(local_popR_LH) := 0;
	init(local_popR_RHL) := 0;
	-- init(local_popR_return_empty):= FALSE;

	-- popLeft local, all default to DUMMY
	init(local_popL_RH) := 0;
	init(local_popL_LH) := 0;
	init(local_popL_LHR) := 0;


	--pushRight local, all default to DUMMY
	init(local_pushR_LH):= 0;
	init(local_pushR_RH) := 0;
	init(local_pushR_RHR) := 0;



	-- FUNTIONS
	next(line) :=
		case
			-- STNAD BY
			-- (line=0)  : {10}; 		-- STAND BY: could go to line:1/ line:10/ line:19
			-- temp schedue
			(line=0 & ProcID=1)  : {1}; 		-- STAND BY: could go to line:1/ line:10/ line:19
			(line=0 & ProcID=2)  : {10,19}; 		-- STAND BY: could go to line:1/ line:10/ line:19
			-- popRIGHT() start
			-- (line=1 & LeftHat=0 & RightHat=0 & ProcID=1)  : {1,2};
			-- (line=1 & LeftHat=1 & RightHat=1 & ProcID=1)  : {1,2};
			-- (line=1 & LeftHat=1 & RightHat=2 & ProcID=1)  : {1,2};
			(line=1 & ProcID=2)  : {1};
			(line=1 & ProcID=1)  : {2}; -- popRight() starts, getRightHat as rh
			-- (line=2)  : {3}; -- getLeftHat as lh
			(line=2 & LeftHat=1 & RightHat=1 & ProcID=1)  : {2,3};
			(line=2 & LeftHat=1 & RightHat=2 & ProcID=1)  : {2,3};
			-- (line=2 & LeftHat=2 & RightHat=2 & ProcID=1)  : {2,3};
			-- (line=2 & LeftHat=1 & RightHat=2 & ProcID=1)  : {2,3};
			-- (line=2 & LeftHat=2 & RightHat=1 & ProcID=1)  : {2,3};

			-- (line=2 & LeftHat=1 & RightHat=2 & ProcID=1)  : {2,3};
			-- (line=3 & (AllNodes[local_popR_RH][1] = local_popR_RH)) : {0}; -- if (rh is self-pointing) return assign popRight_FAIL
			(line=3 & (local_popR_RH=1) & AllNodes[1][1]=1) : {0};
			(line=3 & (local_popR_RH=2) & AllNodes[2][1]=2) : {0};
			(line=3 & !((local_popR_RH=1) & AllNodes[1][1]=1)| (local_popR_RH=2) & AllNodes[1][1]=2) : {4};

			-- (line=3 & !(AllNodes[local_popR_RH][1] = local_popR_RH))  : {4}; -- if !(rh is self-pointing), go to 4
			-- (line=4 & (local_popR_RH = local_popR_LH))  : {5};
			(line=4 & (local_popR_RH=1 &
				 local_popR_LH=1))  : {5};
			(line=4 & (local_popR_RH=2 & local_popR_LH=2))  : {5}; -- if (rh equals lh)
			(line=5) : {6}; -- DCAS (RightHat, LeftHat, rh, lh, Dummy, Dummy)
			(line=6) : {0}; -- assign pop_result as rh->V, END
			-- (line=4 & !(local_popR_RH = local_popR_LH))  : {7}; -- if !(rh equals lh)
			(line=4 & !(local_popR_RH=1 & local_popR_LH=1))  : {7};
			(line=4 & !(local_popR_RH=2 & local_popR_LH=2))  : {7};
			(line=7)  : {8};  --assign rhl as rh->L
			(line=8)  : {9}; -- DCAS (RightHat, rh->L, rh, rhL, rhL, rh)
			(line=9)  : {0}; -- assign popRight_result as rh->V, assign rh->R as DUMMY
			-- pushRIGHT
			(line=10)  : {11}; -- pushRight() starts assing nd as Y --> if null, return pushRight_FAIL
			(line=11)  : {12}; -- assign nd->R as Dummy,assign nd-> V as something (zero for now)
			(line=12)  : {13}; -- assign rh as RightHat, assign rhR as rh->R
			(line=13 & (local_pushR_RH = local_pushR_RHR))  : {14}; -- if (rh == rhR), assign nd -> L = Dummy, assign lh = LeftHat
			(line=14)  : {15}; -- DCAS (RightHat, LeftHat, rh, lh, nd, nd)
			-- (line=15)  : {19}; -- return pushRight_SUCCESS
			(line=15)  : {0}; -- return pushRight_SUCCESS
			(line=13 & !(local_pushR_RH = local_pushR_RHR))  : {16}; -- if !(rh == rhR)   assign nd->L as rh
			(line=16)  : {17}; -- assign nd->L as rh
			(line=17)  : {18}; -- DCAS(RightHat, rh->R, rh, rhR, nd, nd)
			(line=18)  : {0}; -- return pushRight_SUCCESS
			-- (line=18)  : {19}; -- return pushRight_SUCCESS
			-- popLeft
			(line=19)  : {20}; --- popLeft() starts, assign lh as LeftHat, assign rh as RightHat
			-- (line=20)  : {0} ; --if (lh is self-pointing), return assign popLeft_FAIL
			(line=20)  : {21}; -- if(!lh is self-pointing)
			(line=21 & (local_popL_LH =local_popL_RH))  : {22}; -- if(lh == rh)
			(line=22)  : {23}; -- DCAS (LeftHat, RightHat, lh, rh, Dummy, Dummy)
			(line=23) : {0}; -- assign popLeft_result as lh -> V, END
			(line=21 & !(local_popL_LH =local_popL_RH)) : {24}; -- if!(lh == rh)
			(line=24) : {25}; -- assign lhR as lh->R
			(line=25) : {26}; -- DCAS (LeftHat, lh->R, lh, lhR, lfR, lh)
			(line=26) : {0}; -- assign popLeft_result as lh->V, assign lh_L as DDUMMY
			TRUE: line; -- default case
		esac;



		-- local_popR local variables
		next(local_popR_RH) :=
			case
				(line=1) : RightHat;
				-- (line=1 & RightHat=1) : 1;
				-- (line=1 & RightHat=2) : 2;
				TRUE : local_popR_RH;	-- default case
			esac;

		next(local_popR_LH) :=
			case
				(line=2) : LeftHat;
				-- (line=2 & LeftHat=1) : 1;
				-- (line=2 & LeftHat=2) : 2;
				TRUE : local_popR_LH;	-- default case
			esac;

		next(local_popR_RHL) :=
			case
				!(line=7) : local_popR_RHL;
				(line=7) : AllNodes[local_popR_RH][0];
				TRUE : local_popR_RHL;	-- default case
			esac;

		-- next(local_popR_return_empty) :=
		-- 	case
		-- 		(line=3 & (AllNodes[local_popR_RH][1] = local_popR_RH)) : TRUE;
		-- 		TRUE : FALSE;	-- default case
		-- 	esac;




			-- local_pushR local variables
			next(local_pushR_RH) :=
				case
					(line=12): RightHat;
					TRUE: local_pushR_RH;
				esac;
			next(local_pushR_LH) :=
				case
					(line=13 & (local_pushR_RH = local_pushR_RHR)): LeftHat;
					TRUE: local_pushR_LH;
				esac;
			next(local_pushR_RHR) :=
				case
					(line=12): AllNodes[local_pushR_RH][1];
					TRUE: local_pushR_RHR;
				esac;

			-- next(local_pushR_newnode) := local_pushR_newnode;


			-- local_popL local variables

			next(local_popL_LH) :=
				case
					(line=19) : LeftHat;
					TRUE : local_popL_LH;	-- default case
				esac;

			next(local_popL_RH) :=
				case
					(line=19) : RightHat;
					TRUE : local_popL_RH;	-- default case
				esac;


			next(local_popL_LHR) :=
				case
					(line=24) : AllNodes[local_popL_LH][1];
					TRUE : local_popL_LHR;	-- default case
				esac;

		DEFINE
			modifying := (line=5 | line=8 | line=14 | line=17 | line=16 | line=11 | line=22 | line=25);
			popRightSTART 	:= line=1 | line=2 | line=3 | line=4 | line=5 | line=6 | line=7 | line=8 | line=9;
			popRightEND 		:= line=0;
			pushRightSTART	:= line=10 | line=11| line=12 | line=13 | line=14 | line=15 | line=16 | line=17 | line=18;
			pushRightEND		:= line=0;
			popLeftSTART		:= line=19 | line=20 | line=21 | line=22 | line=23 | line=24 | line=25 | line=26;
			popLeftEND			:= line=0;

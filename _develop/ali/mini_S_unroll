# k = 3


Program inputs: mini_R.bool, k

# from step 0 to step 1
((((PC_1_B[0]/\~PC_0_B[0])/\~a_B[0])) -> (((PC_1_B[1]/\PC_0_B[1])/\~a_B[1])))/\
((((PC_1_B[0]/\PC_0_B[0])/\~a_B[0])) -> ((((PC_1_B[1]/\PC_0_B[1])/\a_B[1])\/((PC_1_B[1]/\PC_0_B[1])/\~a_B[1]))))/\
((((~PC_1_B[0]/\PC_0_B[0])/\~a_B[0])) -> (((PC_1_B[1]/\~PC_0_B[1])/\~a_B[1])))/\
((((PC_1_B[0]/\PC_0_B[0])/\a_B[0])) -> ((((PC_1_B[1]/\PC_0_B[1])/\a_B[1])\/((PC_1_B[1]/\PC_0_B[1])/\~a_B[1]))))/\
TRUE

# from step 1 to step 2
((((PC_1_B[1]/\~PC_0_B[1])/\~a_B[1])) -> (((PC_1_B[2]/\PC_0_B[2])/\~a_B[0])))/\
((((PC_1_B[1]/\PC_0_B[1])/\~a_B[1])) -> ((((PC_1_B[2]/\PC_0_B[2])/\a_B[2])\/((PC_1_B[2]/\PC_0_B[2])/\~a_B[2]))))/\
((((~PC_1_B[1]/\PC_0_B[1])/\~a_B[1])) -> (((PC_1_B[2]/\~PC_0_B[2])/\~a_B[2])))/\
((((PC_1_B[1]/\PC_0_B[1])/\a_B[1])) -> ((((PC_1_B[2]/\PC_0_B[2])/\a_B[2])\/((PC_1_B[2]/\PC_0_B[2])/\~a_B[2]))))/\
TRUE

# from step 2 to step 3
((((PC_1_B[2]/\~PC_0_B[2])/\~a_B[2])) -> (((PC_1_B[3]/\PC_0_B[3])/\~a_B[3])))/\
((((PC_1_B[2]/\PC_0_B[2])/\~a_B[2])) -> ((((PC_1_B[3]/\PC_0_B[3])/\a_B[3])\/((PC_1_B[3]/\PC_0_B[3])/\~a_B[3]))))/\
((((~PC_1_B[2]/\PC_0_B[2])/\~a_B[2])) -> (((PC_1_B[3]/\~PC_0_B[3])/\~a_B[3])))/\
((((PC_1_B[2]/\PC_0_B[2])/\a_B[2])) -> ((((PC_1_B[3]/\PC_0_B[3])/\a_B[3])\/((PC_1_B[3]/\PC_0_B[3])/\~a_B[3]))))/\
TRUE

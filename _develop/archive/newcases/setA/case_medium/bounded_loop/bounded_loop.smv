-- [program]
-- /*
-- (assuming int bound = 20)
-- function(int x):
-- 1: y := 0
-- 2: while (x < 20):
--     x = x + 1
--     y = y + 1
-- 3: observe
-- */

MODULE main
VAR
    x: 0..20;
    y: 0..20;
    PC: 1..3; -- program counter starts at 1
    observe: boolean;

ASSIGN
    init(y) := 0;
    -- init(x) := 0; -- not sure if needs initialization, SAT w/o, UNSAT w
    init(PC) := 1;
    init(observe) := FALSE;

    next(x) :=
        case
            (PC = 2 & x < 20): x + 1;  -- during loop increment x
            TRUE: x;
        esac;

    next(y) :=
        case
            (PC = 2 & x < 20 & y < 20): y + 1;  -- during loop increment y
            TRUE: y;
        esac;

    next(PC) :=
        case
            (PC = 1 & x < 20): 2;  -- transition from 1 to 2 (enter loop)
            (PC = 1 & x > 20): 3;  -- break out of loop
            (PC = 2 & x < 20): 2;  -- remain in loop
            (PC = 2 & x >= 20): 3;  -- break out of loop
            TRUE: PC;
        esac;

    next(observe) :=
        case
            (PC = 3): TRUE;  -- set observe to true when break out of loop
            TRUE: observe;
        esac;

--    fun(password, username, date, serverip, serverport)
-- 1:  if (serverip == 0)
-- 2:      result = "server path/port not set"
--     else
-- 3:      httppost = protocol + ":" + serverport + "/login"
-- 4:      httppost2 = protocol + ":" + serverport + "/devlogin"
-- 5:  if (username == "devadmin")
-- 6:      httpclient = httppost2
--     else
-- 7:      httpclient = httppost
-- 8:  if(password==match)
-- 9:     loginsuccess = TRUE
-- 10:     creds = username + password
--     else
-- 11:     loginsuccess = FALSE
-- 12:     creds = "(none)"
-- 13: data = date
-- 14: data = data + creds
-- 15: data = data + identity
-- 16: loginfo = data
-- 17: if (loginsuccess == TRUE)
-- 18:     loginfo = loginfo + "successful login"
-- 19:     result = PostLogin.class
-- 20:     startactivity = result + loginfo
--     else
-- 21:     loginfo = loginfo
-- 22:     result = WrongLogin.class
-- 23:     startactivity = result;
-- 24: halt


MODULE main

    -- DEFINE
    --     protocol := 1;
    --     match := 1;
    --     idenity := 1;
    
    VAR
        --inputs
        password: 1..2;
        username: 1..2;
        date: 1..2;
        serverip: 1..2;
        serverport: 1..2;

        --internal
        loginsuccess: boolean;
        httppost: 3..5;
        httppost2: 4..6;
        httpclient: 3..6;
        creds: 0..4;
        result: 1..4;
        data: 1..7;
        loginfo: 1..8;
        startactivity: 1..12;

        --constants
        protocol: 0..1;
        match: 1..2;
        identity: 0..1;

        --model vars
        PC: 1..24;
        halt: boolean;


    ASSIGN
        init(PC) := 1;
        init(halt) := FALSE;

        init(username) := 1; --user
        init(date) := 1; --today
        init(loginfo) := 1; -- (empty)
        init(creds) := 0; --""
        init(result) := 1; --(unknown)
        init(httppost) := 4; --""
        init(httppost2) := 5; --""
        init(protocol) :=1;
        init(match) :=1;
        init(identity) :=1;
        init(startactivity) :=1;

        next(protocol) := protocol;
        next(match) := match;
        next(identity) := identity;
        next(password) := password;
        next(username) := username;
        next(date) := date;
        next(serverip) := serverip;
        next(serverport) := serverport;

        next(PC) := 
            case
                (PC=1 & serverip = 0): 2;
                (PC=1 & serverip != 0): 3;
                (PC=2): 5;
                (PC=3): 4;
                (PC=4): 5;
                (PC=5 & username = 2): 6; --username is devadmin
                (PC=5 & username != 2): 7;
                (PC=6): 8;
                (PC=7): 8;
                (PC=8 & password = match): 9;
                (PC=8 & password != match): 11;
                (PC=9): 10;
                (PC=10): 13;
                (PC=11): 12;
                (PC=12): 13;
                (PC=13): 14;
                (PC=14): 15;
                (PC=15): 16;
                (PC=16): 17;
                (PC=17 & loginsuccess = TRUE): 18;
                (PC=18): 19;
                (PC=19): 20;
                (PC=20): 24;
                (PC=17 & loginsuccess = FALSE): 21;
                (PC=21): 22;
                (PC=22): 23;
                (PC=23): 24;
                (PC=24): 24; --halt state; loop here
                TRUE: PC;
            esac;

        next(halt) :=
            case
                (PC=24): TRUE;
                TRUE: halt;
            esac;

        next(httppost) :=
            case
                (PC=3 & serverip != 0): protocol + 1 + serverport + 1;
                TRUE: httppost;
            esac;
        
        next(httppost2) :=
            case
                (PC=4 & serverip != 0): protocol + 1 + serverport + 2;
                TRUE: httppost2;
            esac;
        
        next(result) :=
            case
                (PC=2 & serverip = 0): 2;
                (PC=19 & loginsuccess = TRUE): 3;
                (PC=22 & loginsuccess = FALSE): 4;
                TRUE: result;
            esac;
        
        next(httpclient) :=
            case
                (PC=6 & username = 2): httppost2;
                (PC=7 & username != 2): httppost;
                TRUE: httpclient;
            esac;
        
        next(loginsuccess) :=
            case
                (PC=9 & password = match): TRUE;
                (PC=11 & password != match): FALSE;
                TRUE: loginsuccess;
            esac;
        
        next(creds) :=
            case
                (PC=10 & password = match): username + password;
                (PC=12 & password != match): 1;
                TRUE: creds;
            esac;
        
        next(data) :=
            case
                (PC=13): date;
                --(PC=14): ((data * 100) + creds);
                (PC=14): date + creds;
                --(PC=15): ((data * 10) + 1);
                (PC=15): date + creds + identity;
                TRUE: data;
            esac;

        next(loginfo) := 
            case
                (PC=16): data;
                --(PC=18 & loginsuccess=TRUE): (loginfo * 10);
                (PC=18 & loginsuccess=TRUE): data + 1;
                (PC=21 & loginsuccess=FALSE): data;
                TRUE: loginfo;
            esac;
        
        next(startactivity) := 
            case
                -- two cases here depending on how long loginfo is
                (PC=20 & loginsuccess=TRUE ): result + loginfo;
                (PC=23 & loginsuccess=FALSE): result;
                TRUE: startactivity;
            esac;
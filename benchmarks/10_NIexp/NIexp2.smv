-- Generalized NI
-- Code adapted from: 
-- Hiroshi Unno, Tachio Terauchi, and Eric Koskinen. Constraint-based relational verification. (CAV 2021)
-- [PROGRAM]
-- gniEx(int high, int low) {
--   1: if (high == 1) {
--       int x = ndet_int ; // here we assign at the beginning
--   2:     if (x >= low)
--   3:       { return x; }
--   4:     else { while (true) {} } }
--      else {
--   5:    int x = low;
--         while ( ndet_bool ) {
--   6:         x++; }
--      return x;
-- 		}
MODULE main
VAR
	PC: 1..7;
	nondet: boolean;
	high: 0..7;
	x: 0..10;
	low: 0..5;

ASSIGN
	init(PC) := 1 ;
	init(nondet) := {TRUE, FALSE};
	init(x) := {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
	init(low) := {0, 1, 2, 3, 4, 5};

	next(low) := low;
	next(high) := high;
	next(PC) := 
		case
		(PC = 1 & (high=1)): 2;
		(PC = 1 & !(high=1)): 5;
		(PC = 2 & x >= low) : 3;
		(PC = 2 & x < low) : 4;
		(PC = 5 & !nondet) : 3;
		(PC = 5 & nondet) : 6;
		(PC = 6 & !nondet) : 3;
		(PC = 6 & nondet & (x<10)) : 6;
		(PC = 6 & nondet & (x=10)) : 7;
		TRUE: PC ;
		esac;

	next(x) := 
		case
		(PC = 5): low;
		(PC = 6 & (x<10)): x + 1;
		TRUE: x;
		esac;

	next(nondet) := 
		case
		(PC = 5 | PC = 6): {TRUE, FALSE};
		TRUE: nondet;
		esac;

DEFINE
	halt := (PC=3) ;

Each node [leftpointer, node, rightpointer]
DUMMY, X, Y, Z

0: standby
1: popRight() start (go to 2)
2. popRight_rh = RightHat (go to 3)
3. popRight_lh = LeftHat (go to 4)
4. if(node[popRight_rh][2] = popRight_rh) (goto 5, else goto 6.) 
5.   Return empty (goto popRight end.)
6. if(popRight_rh = popRight_lh) (goto 7, else goto 9)
7. If DCAS goto 8, else goto popRight end
8. Return popped node,  popRight end
9. popRIght_rhL =node[popRight_rh][0] goto 10
10. If DCAS, then goto 11
11. node[RightHat][2] =Dummy goto 12
12  return popped node. Go to popRight end
13. Poprightend , goto 0.

16. pushRight() start (go to 17)
17. pushRight_newnode = newnode
18. If FULL (goto 31), (else, goto 19)
19. node[newnode][2]=Dummy(goto 20)
20. pushRight_rh =RightHat (goto 21)
21. pushRight_rhR= node[rh][2] (goto 22)
22. if (pushRight_rh = pushRight_rhR) (goto 23)(else go to 27)
23. node[nd][0] = Dummy (go to 24)
24. pushRight_lh = LeftHat (go to 25)
25. If DCAS (go to 26, else 27) 
26.  Return push right success (go to 30)
27. node[nd][0] = pushRight_rh 
28. If DCAS (goto 29)
29. Return success (GOTO 31)
30. pushRightEnd









	// structure:
	// 0   popRight() starts:
	// 1        - getRightHat as rh
	// 2		- getLeftHat as lh
	// 3		- if (rh is self-pointing) 
	// 4			return assign popRight_FAIL
	// 5 		- else if (rh equals lh)  
	// 6			DCAS (RightHat, LeftHat, rh, lh, Dummy, Dummy) 
	// 7			assign pop_result as rh->V
	// 8		- else  assign rhl as rh->L
	// 9				DCAS (RightHat, rh->L, rh, rhL, rhL, rh)
	// 10				assign popRight_result as rh->V
	// 11				assign rh->R as DUMMY
	// 12   pushRight() starts: 
	// 13       - assing nd as Y --> if null, return pushRight_FAIL
	// 14		- assign nd->R as Dummy
	// 15		- assign nd-> V as something (zero for now)
	// 16		- assign rh as RightHat
	// 17		- assign rhR as rh->R
	// 18		if (rh == rhR)
	// 19			 assign nd -> L = Dummy
	// 20			 assign lh = LeftHat
	// 21			 DCAS (RightHat, LeftHat, rh, lh, nd, nd)
	// 22			 return pushRight_SUCCESS
	// 23		else   assign nd->L as rh
	// 24			   DCAS(RightHat, rh->R, rh, rhR, nd, nd)
	// 25			   return pushRight_SUCCESS
	// 26	popLeft() starts:	
	// 27		- assign lh as LeftHat
	// 28		- assign rh as RightHat
	// 29		- if (lh is self-pointing)
	// 30				return assign popLeft_FAIL
	// 31		- else if (lh == rh)
	// 32				DCAS (LeftHat, RightHat, lh, rh, Dummy, Dummy)
	// 33				assign popLeft_result as lh -> V
	// 34		- else  assign lhR as lh->R
	// 35				DCAS (LeftHat, lh->R, lh, lhR, lfR, lh)
	// 36				assign popLeft_result as lh->V
	// 37				assign lh_L as Dummys
	// 38
	// 39
	// 40 ------- STAND BY: could go to 0/12/26









--
-- // SNARK structure (with some accelerations):
-- // 0   ------- STAND BY: could go to line:1/ line:10/ line:19
-- // 	  popRight() starts:
-- // 1   - getRightHat as rh
-- // 2		- getLeftHat as lh
-- // 3		- if (rh is self-pointing) return assign popRight_FAIL
-- // 4 	- else if (rh equals lh)
-- // 5			DCAS (RightHat, LeftHat, rh, lh, Dummy, Dummy)
-- // 6			assign pop_result as rh->V
-- // 7		- else  assign rhl as rh->L
-- // 8				DCAS (RightHat, rh->L, rh, rhL, rhL, rh)
-- // 9				assign popRight_result as rh->V, assign (rh->R as DUMMY)	
-- //    pushRight() starts:
-- // 10    - assing nd as Y --> if null, return pushRight_FAIL
-- // 11		- assign nd->R as Dummy,assign nd-> V as something (zero for now)
-- // 12		- assign rh as RightHat, assign rhR as rh->R
-- // 13		if (rh == rhR), assign nd -> L = Dummy, assign lh = LeftHat
-- // 14			 DCAS (RightHat, LeftHat, rh, lh, nd, nd)
-- // 15			 return pushRight_SUCCESS
-- // 16		else   assign nd->L as rh
-- // 17			   DCAS(RightHat, rh->R, rh, rhR, nd, nd)
-- // 18			   return pushRight_SUCCESS
-- //  popLeft() starts:
-- // 19		- assign lh as LeftHat, assign rh as RightHat
-- // 20		- if (lh is self-pointing), return assign popLeft_FAIL
-- // 21		- else if (lh == rh)
-- // 22				DCAS (LeftHat, RightHat, lh, rh, Dummy, Dummy)
-- // 23				assign popLeft_result as lh -> V
-- // 24		- else  assign lhR as lh->R
-- // 25				DCAS (LeftHat, lh->R, lh, lhR, lhR, lh)
-- // 26				assign popLeft_result as lh->V, assign (lh_L as DUMMY)




-- // SNARK structure, sequentially:
-- // 0   ------- STAND BY: could go to line:1/ line:4/ line:7
-- // 1.  popRight() starts, executing, changing nodes
-- // 2    wait
-- // 3   END
-- // 4.  pushRight() starts, executing, changing nodes
-- // 5    wait
-- // 6.  END
-- // 7   popLeft() starts, executing, changing nodes
-- // 8	wait	
-- // 9.  END


forall A. exists B.
F(GlobalQueue-FAIL[A]) \/
G(((proc1.popRightSTART[A] <-> proc1.popRightSTART[B]) /\ (proc1.popRightEND[A] <-> proc1.popRightEND[B])
/\ (proc1.pushRightSTART[A] <-> proc1.pushRightSTART[B]) /\ (proc1.pushRightEND[A] <-> proc1.pushRightEND[B])
/\ (proc1.popLeftSTART[A] <-> proc1.popLeftSTART[B]) /\  (proc1.popLeftEND[A] <-> proc1.popLeftEND[B])
/\ (proc2.popRightSTART[A] <-> proc2.popRightSTART[B]) /\ (proc2.popRightEND[A] <-> proc2.popRightEND[B])
/\ (proc2.pushRightSTART[A] <-> proc2.pushRightSTART[B]) /\ (proc2.pushRightEND[A] <-> proc2.pushRightEND[B])
/\ (proc2.popLeftSTART[A] <-> proc2.popLeftSTART[B]) /\  (proc2.popLeftEND[A] <-> proc2.popLeftEND[B]))
/\ ((GlobalQueue-popRightFAIL[A] <-> GlobalQueue-popRightFAIL[B])))


exists A. exists B.
G(~GlobalQueue-FAIL[A])
/\ F(proc2.L_popped_X[A])
/\ F(proc3.R_popped_Z[A])
/\ F(proc2.L_popped_Y[A])
/\ F(proc1.R_popped_Y[A])





forall A. exists B.
F(GlobalQueue-FAIL[A]) \/
G(((proc1.popRightSTART[A] <-> proc1.popRightSTART[B]) /\ (proc1.popRightEND[A] <-> proc1.popRightEND[B])
/\ (proc1.pushRightSTART[A] <-> proc1.pushRightSTART[B]) /\ (proc1.pushRightEND[A] <-> proc1.pushRightEND[B])
/\ (proc1.popLeftSTART[A] <-> proc1.popLeftSTART[B]) /\  (proc1.popLeftEND[A] <-> proc1.popLeftEND[B])
/\ (proc2.popRightSTART[A] <-> proc2.popRightSTART[B]) /\ (proc2.popRightEND[A] <-> proc2.popRightEND[B])
/\ (proc2.pushRightSTART[A] <-> proc2.pushRightSTART[B]) /\ (proc2.pushRightEND[A] <-> proc2.pushRightEND[B])
/\ (proc2.popLeftSTART[A] <-> proc2.popLeftSTART[B]) /\  (proc2.popLeftEND[A] <-> proc2.popLeftEND[B]))
/\ (((proc1.popRightEND[A] <-> proc1.popRightEND[B]) \/ (proc1.popLeftEND[A] <-> proc1.popLeftEND[B])
      \/ (proc1.popLeftEND[A] <-> proc1.popLeftEND[B]) \/ (proc2.popLeftEND[A] <-> proc2.popLeftEND[B]))->
          ((GlobalQueue-popRightFAIL[A] <-> GlobalQueue-popRightFAIL[B]))))








-- //// TRIGGER 0
-- // 0   trigger0 loops if (mask != 0) else go to line25
-- // 1        - while (trigger0 == 0) do nothing
-- // 2		- result = result OR mask
-- // 3		- trigger0 = 0
-- // 4		- maintrigger = matrigger + 1
-- // 5 		- if maintrigger = 1, then trigger1 = 1
-- // 6 		- if (mask != 0 and trigger0 = 0) back to line 1
-- //// TRIGGER 1
-- // 8	trigger1 loops if (mask != 0) else go to line25
-- // 9		- while (trigger1 == 0) do nothing
-- // 10		- result = result AND compliment(mask)
-- // 11		- trigger1 = 0
-- // 12   	- maintrigger = maintriger + 1
-- // 13       - if maintrigger = 1, then trigger0 = 1
-- // 14		- if (mask != 0 and trigger1 = 0) back to line 9
-- //// MAIN TRIGGER
-- // 16	maintrigger starts:
-- // 17		- while (mask != 0) // Hm mm
-- // 18		- maintrigger = 0
-- // 19		- if (PIN & Mask = 0)
-- // 20		- trigger0 = 1
-- // 21		- else    trigger1 = 1
-- // 22		while (maintrigger != 2) loop
-- // 23		mask = mask / 2







-- //// TRIGGER 0
-- // 0   trigger0 loops if (mask != 0) else go to line25
-- // 1        - while (trigger0 == 0) do nothing
-- // 2		- result = result OR mask
-- // 3		- trigger0 = 0
-- // 4		- maintrigger = matrigger + 1
-- // 5 		- if maintrigger = 1, then trigger1 = 1
-- // 6 		- if (mask != 0 and trigger0 = 0) back to line 1
-- //// TRIGGER 1
-- // 0	trigger1 loops if (mask != 0) else go to line25
-- // 1		- while (trigger1 == 0) do nothing
-- // 2		- result = result AND compliment(mask)
-- // 3		- trigger1 = 0
-- // 4   	- maintrigger = maintriger + 1
-- // 5       - if maintrigger = 1, then trigger0 = 1
-- // 6		- if (mask != 0 and trigger1 = 0) back to line 9
-- //// MAIN TRIGGER
-- // 		maintrigger starts:
-- // 0		- while (mask != 0) // Hm mm
-- // 1		- maintrigger = 0
-- // 2		- if (PIN & Mask = 0)
-- // 3		- trigger0 = 1
-- // 4		- else    trigger1 = 1
-- // 5		while (maintrigger != 2) loop
-- // 6		mask = mask / 2



















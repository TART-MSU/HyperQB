--BAKERY ALGORITHM
MODULE main
	VAR
		-- p1_status: 0..2; -- 0: non-critical, 1: waiting, 2: critical
		-- p2_status: 0..2; -- 0: non-critical, 1: waiting, 2: critical
		-- p3_status: 0..2; -- 0: non-critical, 1: waiting, 2: critical

		p1_ticket: 0..3; -- the ticket number of p1
		p2_ticket: 0..3; -- the ticket number of p2
		p3_ticket: 0..3; -- the ticket number of p2
		p4_ticket: 0..3; -- the ticket number of p2
		p5_ticket: 0..3; -- the ticket number of p2

		MAX_ticket: 0..3; -- let's say max ticket number is 3

		-- TOKEN: 1..3;

		p1_line: 0..4;
		p2_line: 0..4;
		p3_line: 0..4;
		p4_line: 0..4;
		p5_line: 0..4;


		--- (problmatic)
		-- proc1: process a_process(p1_ticket, p2_ticket, p1_status, p2_status, MAX_ticket);
		-- proc2: process a_process(p2_ticket, p1_ticket, p2_status, p1_status, MAX_ticket);

		-- FirstID: 1..2;
		-- SecondID: 1..2;
		-- proc1: process a_process(p1_ticket, p2_ticket, p1_status, p2_status, MAX_ticket, FirstID,TOKEN);
		-- proc2: process a_process(p2_ticket, p1_ticket, p2_status, p1_status, MAX_ticket, SecondID,TOKEN);


	ASSIGN


			-- case
			-- 	(TOKEN=1) : {2,3};
			-- 	(TOKEN=2) : {1,3};
			-- 	(TOKEN=3) : {1,2};
			-- esac;
		-- init(p1_status) := 0;
		-- init(p2_status) := 0;
		-- init(p3_status) := 0;

		init(p1_ticket) := 0;
		init(p2_ticket) := 0;
		init(p3_ticket) := 0;
		init(p4_ticket) := 0;
		init(p5_ticket) := 0;



		init(p1_line) := 0;
		init(p2_line) := 0;
		init(p3_line) := 0;
		init(p4_line) := 0;
		init(p5_line) := 0;
		-- init(p3_line) := 1;



		-- init(TOKEN) := 1;
		-- next(TOKEN) :=
		-- 	case
		-- 		-- (p1_ticket > p2)
		-- 		(p1_line=3) : {1}; -- p1 has priority
		-- 		(p2_line=3) : {2};
		-- 		(p3_line=3) : {3};
		-- 		TRUE: {1,2,3};
		-- 	esac;
		init(MAX_ticket):= 0;
		next(MAX_ticket):=
			case
				(MAX_ticket=3): 0; --reset
				(p1_line=1 | p2_line=1 | p3_line=1): MAX_ticket+1;
				TRUE: MAX_ticket+1;
			esac;

		-- This assignment tells me which line I execute next
		next(p1_line) :=
			case
				-- (TOKEN!=1) : p1_line;
				(p1_line=0) : {0,1};  -- stay, or proceed
				-- (p1_line=2 & !(TOKEN=1)) : {2}; -- draw ticket
				(p1_line=1) : {2}; -- draw ticket
				(p1_line=2 & !p1-TOKEN) : {2}; -- check TOKEN
				(p1_line=2 & p1-TOKEN) : {3}; -- check TOKEN
				(p1_line=3) : {4}; -- stay in critical section, or leave
				(p1_line=4) : {0}; -- back to starting point
				-- (p1_line=5) : {5}; -- END
				TRUE: p1_line;
			esac;

		next(p1_ticket):=
			case
				(MAX_ticket=3): 0; --reset
				(p1_line=1): MAX_ticket+1;
				TRUE: p1_ticket;
			esac;


		next(p2_line) :=
			case
				(p2_line=0) : {0,1};  -- stay, or proceed
				(p2_line=1) : {1};
				(p2_line=2 & !p2-TOKEN): {2}; -- check TOKEN
				(p2_line=2 & p2-TOKEN): {3}; -- check TOKEN
				(p2_line=3) : {4}; -- stay in critical section, or leave
				(p2_line=4) : {0}; -- back to starting point
				-- (p2_line=5) : {5}; -- END
				TRUE: p2_line;
			esac;

		next(p2_ticket):=
			case
				(MAX_ticket=3): 0; --reset
				(p2_line=1): MAX_ticket+1;
				TRUE: p2_ticket;
			esac;


		next(p3_line) :=
			case
				(p3_line=0) : {0,1};  -- stay, or proceed
				(p3_line=1) : {2};
				(p3_line=2 & !p3-TOKEN) : 2 ; -- check TOKEN
				(p3_line=2 & p3-TOKEN) : 3 ; -- check TOKEN
				(p3_line=3) : {4}; -- stay in critical section, or leave
				(p3_line=4) : {0}; -- back to starting point
				-- (p3_line=5) : {5}; -- END
				TRUE: p3_line;
			esac;
		next(p3_ticket):=
			case
				(MAX_ticket=3): 0; --reset
				(p3_line=1): MAX_ticket+1;
				TRUE: p3_ticket;
			esac;


		next(p4_line) :=
			case
				(p4_line=0) : {0,1};  -- stay, or proceed
				(p4_line=1) : {2};
				(p4_line=2 & !p4-TOKEN) : 2 ; -- check TOKEN
				(p4_line=2 & p4-TOKEN) : 3 ; -- check TOKEN
				(p4_line=3) : {4}; -- stay in critical section, or leave
				(p4_line=4) : {0}; -- back to starting point
				-- (p4_line=5) : {5}; -- END
				TRUE: p4_line;
			esac;
		next(p4_ticket):=
			case
				(MAX_ticket=3): 0; --reset
				(p4_line=1): MAX_ticket+1;
				TRUE: p4_ticket;
			esac;


		next(p5_line) :=
			case
				(p5_line=0) : {0};  -- stay, or proceed
				(p5_line=1) : {2};
				(p5_line=2 & !p5-TOKEN) : 2 ; -- check TOKEN
				(p5_line=2 & p5-TOKEN) : 3 ; -- check TOKEN
				(p5_line=3) : {4}; -- stay in critical section, or leave
				(p5_line=4) : {0}; -- back to starting point
				-- (p5_line=5) : {5}; -- END
				TRUE: p5_line;
			esac;


		next(p5_ticket):=
			case
				(MAX_ticket=3): 0; --reset
				(p5_line=1): MAX_ticket+1;
				TRUE: p5_ticket;
			esac;

	DEFINE
		-- STARTED := (p1_ticket!=0 | p2_ticket!=0 | p3_ticket!=0); -----?????
		p1-TOKEN := ((p1_ticket <= p2_ticket) & (p1_ticket <= p3_ticket)
											& (p1_ticket <= p4_ticket)& (p1_ticket <= p5_ticket));
		p2-TOKEN := (((p2_ticket <= p1_ticket) & (p2_ticket <= p3_ticket)
											& (p2_ticket <= p4_ticket) &  (p2_ticket <= p5_ticket))) | !p1-TOKEN;
		p3-TOKEN := (((p3_ticket <= p1_ticket) & (p3_ticket <= p2_ticket)
											& (p3_ticket <= p4_ticket) & (p3_ticket <= p5_ticket))) | !p1-TOKEN & !p2-TOKEN;
		p4-TOKEN := (((p4_ticket <= p1_ticket) & (p4_ticket <= p2_ticket)
											& (p4_ticket <= p3_ticket) & (p4_ticket <= p5_ticket))) | !p1-TOKEN & !p2-TOKEN & !p3-TOKEN;
		p5-TOKEN := (((p5_ticket <= p1_ticket) & (p5_ticket <= p2_ticket)
											& (p5_ticket <= p3_ticket) & (p5_ticket <= p4_ticket))) | !p1-TOKEN & !p2-TOKEN & !p3-TOKEN & !p4-TOKEN;



		-- finish the 4th and 5th TOKEN


	-- DEFINE
	-- 	CRITICAL := (proc1.line=3);
	-- 	SYM_SELECTED :=

--
-- MODULE a_process(my_ticket, others_ticket, my_status, others_status, MAX_ticket, ProcID, TOKEN)
-- 	VAR
-- 		line: 1..5;
--
--

	-- ASSIGN
	-- 	init(line) := 1;
	-- 	-- This assignment tells me which line I execute next
	-- 	next(line) :=
	-- 		case
	-- 			(ProcID!=TOKEN) : line;
	-- 			(line=1) : {1,2};  -- stay, or proceed
	-- 			(line=2) : 3;
	-- 			(line=3) & (others_status=2 | (others_status=1 & ProcID=2))  : 3 ; -- if some smaller IDs are trying
	-- 																																				-- keep waiting
	-- 			(line=3) & !(others_status=2 | (others_status=1 & ProcID=2))  : 4 ; -- go to critical section
	-- 			(line=4) : {5}; -- stay in critical section, or leave
	-- 			(line=5) : 1; -- back to starting point
	-- 		esac;
	--
	-- 	next(my_status) :=
	-- 		case
	-- 			(line=1) : 0;
	-- 			(line=2) : 0;
	-- 			(line=3) : 1;
	-- 			(line=4) : 2;
	-- 			(line=5) : 0;
	-- 			TRUE : my_status;	-- default case
	-- 		esac;
	--
	-- 	next(MAX_ticket):=
	-- 	  case
	-- 			(MAX_ticket=3): 0; --reset
	-- 			(line=2): MAX_ticket+1;
	-- 			!(line=2): MAX_ticket;
	-- 		esac;
	--
	-- 	next(my_ticket):=
	-- 		case
	-- 			(MAX_ticket=3): 0; --reset
	-- 			(line=2): MAX_ticket+1;
	-- 			!(line=2): my_ticket;
	-- 		esac;
	--
	--
	-- 	next(others_ticket) := others_ticket;	-- don't change it.
	-- 	next(others_status) := others_status;	-- don't change it.
	--
	-- 	DEFINE
	-- 		-- CHOSED:= (TOKEN=ProcID);
	-- 		STAND_BY := line=1;
	-- 		DRAW_TICKET := line=2;
	-- 		ATTEMPT := line=3;
	-- 		CRITICAL_SECTION := line=4;
	-- 		FINISHED := line=5;


-- For TESTING only
-- LTLSPEC F(proc1.my_status=1)

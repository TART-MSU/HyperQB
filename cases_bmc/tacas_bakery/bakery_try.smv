--BAKERY ALGORITHM
MODULE main
	VAR
		-- p1_status: 0..2; -- 0: non-critical, 1: waiting, 2: critical
		-- p2_status: 0..2; -- 0: non-critical, 1: waiting, 2: critical
		-- p1_ticket: 0..3; -- the ticket number of p1
		-- p2_ticket: 0..3; -- the ticket number of p2
		MAX_ticket: 0..3; -- let's say max ticket number is 3
		FirstID: 1..2;
		SecondID: 1..2;
		TOKEN: 1..3;
		--- (problmatic)
		-- proc1: process a_process(p1_ticket, p2_ticket, p1_status, p2_status, MAX_ticket);
		-- proc2: process a_process(p2_ticket, p1_ticket, p2_status, p1_status, MAX_ticket);

		-- proc1: process a_process(MAX_ticket, TOKEN, FirstID);
		-- proc2: process a_process(MAX_ticket, TOKEN, SecondID);

		proc1: a_process(MAX_ticket, TOKEN, FirstID);
		proc2: a_process(MAX_ticket, TOKEN, SecondID);
	ASSIGN
		-- init(p1_status) := 0;
		-- init(p2_status) := 0;
		-- init(p1_ticket) := 0;
		-- init(p2_ticket) := 0;
		init(MAX_ticket):= 0;

		init(FirstID) := 1;
		next(FirstID) := 1;

		init(SecondID) := 2;
		next(SecondID) := 2;

		init(TOKEN) := 1;



MODULE BAKERY(MAX_ticket, TOKEN, proc1, proc2)
	VAR
		-- line: 1..5;

	ASSIGN
		next(MAX_ticket):=
			case
				(MAX_ticket=3): 0; --reset
				(line=2): MAX_ticket+1;
				!(line=2): MAX_ticket;
			esac;


		next(TOKEN):=
			case
				(proc1.line=2 & proc2.line=2): 1;
				TRUE: {1,2};
			esac;





MODULE a_process(MAX_ticket, TOKEN, ProcID)
	VAR
		line: 1..5;
		-- status: 0..2;
		ticket: 0..3;
	ASSIGN
		init(line) := 1;
		next(line) :=
			case
				-- (!((TOKEN=1 & ProcID=1)| (TOKEN=2 & ProcID=2))) : line;
				-- (!(TOKEN = ProcID)) : line;
				(line=1) : {2};  -- stay, or proceed
				(line=2) : {3}; -- draw ticket
				(line=3) : {4}; --attempt to enter critical section
				-- (line=3) & (others_status=2)  : 3 ; -- keep waiting
				-- (line=3) & !(others_status=2)  : 4 ; -- go to critical section
				(line=4) : {5}; -- stay in critical section, or leave
				(line=5) : 1; -- back to starting point
				TRUE: line;
			esac;

		-- init(status) := 0;
		-- next(status) :=
		-- 	case
		-- 		(line=1) : 0;
		-- 		(line=2) : 0;
		-- 		(line=3) : 1;
		-- 		(line=4) : 2;
		-- 		(line=5) : 0;
		-- 		TRUE : status;	-- default case
		-- 	esac;


		init(ticket) := 0;
		next(ticket):=
			case
				(MAX_ticket=3): 0; --reset
				(line=2): MAX_ticket+1;
				!(line=2): ticket;
				TRUE: ticket;
			esac;

		DEFINE
			-- CHOSED:= (TOKEN=ProcID);
			STAND_BY := line=1;
			DRAW_TICKET := line=2;
			ATTEMPT := line=3;
			CRITICAL_SECTION := line=4;
			FINISHED := line=5;

--
-- 		next(others_ticket) := others_ticket;	-- don't change it.
-- 		next(others_status) := others_status;	-- don't change it.
--
--
-- -- For TESTING only
-- LTLSPEC F(proc1.my_status=1)

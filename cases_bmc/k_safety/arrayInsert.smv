MODULE main
 VAR
	location: 1..7;
	i: 0..5;
	arr: array 0..5 of 0..10;

 FROZENVAR
	h: 0..10;
	
 ASSIGN
	init(location) := 1;
	init(arr[0]) := 0;
	init(arr[1]) := 2;
	init(arr[2]) := 4;
	init(arr[3]) := 6;
	init(arr[4]) := 10;
	--init(len) := 5;
	init(i) := 0;
	init(h) := {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
	
	next(location) := case
		(location = 1 & arr[i] < h): 2;
		(location = 1): 3;
		(location = 1 & arr[i] >= h): 3;
		(location = 2): 3;
		(location = 3): 4;
		(location = 4): 5;
		(location = 5 & i < 5): 6;
		(location = 5 & i >= 5): 7;
		(location = 6) : 5;
		TRUE: location ;
	esac;

	next(i) := case
		(location = 2 & i < 5) : i + 1;
		(location = 6 & i < 5) : i + 1;
		TRUE: i;
	esac;
	
	next(arr[0]) := case
		(location = 3 & i = 0) : h;
		(location = 3 & i >= 1) : arr[0];
		TRUE: arr[0];
	esac;
	
	next(arr[1]) := case
		(location = 3 & i = 0) : arr[0];
		(location = 3 & i = 1) : h;
		(location = 3 & i >= 2) : arr[1];
		TRUE: arr[0];
	esac;

	next(arr[2]) := case
		(location = 3 & i <= 1) : arr[1];
		(location = 3 & i = 2) : h;
		(location = 3 & i >= 3) : arr[2];
		TRUE: arr[0];
	esac;

	next(arr[3]) := case
		(location = 3 & i <= 2) : arr[2];
		(location = 3 & i = 3) : h;
		(location = 3 & i >= 4) : arr[3];
		TRUE: arr[0];
	esac;

	next(arr[4]) := case
		(location = 3 & i <= 3) : arr[3];
		(location = 3 & i = 4) : h;
		(location = 3 & i >= 5) : arr[4];
		TRUE: arr[0];
	esac;

	next(arr[5]) := case
		(location = 3 & i <= 4) : arr[4];
		(location = 3 & i = 5) : h;
		TRUE: arr[0];
	esac;

 DEFINE
	halt := location = 7 ;